%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Taxonomy IV Collab 2015.pdf)
%%Creator: (Adobe Acrobat 15.8.0)
%%For: RombertSt
%%CreationDate: 07-10-15, 13:06
%%BoundingBox: 0 0 842 595
%%HiResBoundingBox: 0 0 842 595
%%CropBox: 0 0 842 595
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 963 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2015-10-06T18:07:52Z"
   xmp:CreatorTool="Word"
   xmp:ModifyDate="2015-10-06T18:07:52Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11 Quartz PDFContext">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Rombert Stapel</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Taxonomy IV Collab 2015</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -595 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 595 li
842 595 li
842 0 li
cp
clp
gsave
35.9999 70.08 mo
420.72 70.08 li
420.72 34.0801 li
35.9999 34.0801 li
35.9999 70.08 li
clp
false sop
0 0 0 rgb
%ADOBeginSubsetFont: XJKAAA+MyriadPro-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /XJKAAA+MyriadPro-Regular def/FontInfo 6 dict dup begin/Weight (Regular) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 76 /L putdup 82 /R putdup 84 /T putdup 97 /a putdup 98 /b putdup 101 /e putdup 102 /f putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 120 /x putdup 121 /y putdef/UniqueID 0 def/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604553 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings20 dict dup begin/space <1C60D8A8C9B896187A> |-/L <1C60D8A8C9B74383E5F6C6CDF9C5C9B986319F48E0C8F60D9DD3B951CB8A90C91D93DE> |-/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA09B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/m <1C60D8A8C9B6B770778B71072C32D83B2DE18F9EFFEDDA9C73816E98D1CE691983731B7222B167A6D2F63D304D344E93EA069603D18629A4320C5F1BC8DCC049DE26F978CA9BC88005768D4CD278F658DBD0215EC4C428D90DCB1C70291E674313AFD07F4ACB4C5152C73088F1801AB89447326D19BFA79413EE5F810BDD4269F23365D24789FC23A7E37320B3F849B7FB9F5D52128289A6456940F89EBCF3> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/x <1C60D8A8C9B74CDDCE74E258E27BD7DEC2AC84271E6C98FD20D770EC885A525E4B13092058B38B98D913CBB4CB890C6B5723895529FEAE9BA916EC36A86A9F59939408772A8E004C80432C1BF5EAC4792ACA2BAD6B237FD805243D3976056A1B26> |-/y <1C60D8A8C9B744514052D02E803EBAB86C11F12291D9D5A1504FC788087D686381D5B543506197B0A8ADF9BBF970FE769142A069FB8380E5823DCC497A6C0095124D4923B5CA9C6A958F4E90ADD7B82826865D1CD8932D873AEC8C248461B62B69DDE1FA42A8CFA455E382875F1E62FEF36E2B6CCC071B48DCAFB9B91BFAAE28D80C> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSQHJK+MyriadPro-Regular /XJKAAA+MyriadPro-Regular findfont ct_VMDictPut/VSQHJK+MyriadPro-Regular*1 [32{/.notdef}rp /space 43{/.notdef}rp /L 5{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]VSQHJK+MyriadPro-Regular nfVSQHJK+MyriadPro-Regular*1 [19.92 0 0 -19.92 0 0 ]msf41.28 53.04 mo(Taxonomy of Labour Relations)[9.93996 9.64117 9.26275 10.9758 11.0953 10.9758 16.673 9.42201 4.24307 10.9758 5.83672 4.24307 9.44208 9.64117 11.3743 10.9758 11.0157 6.53369 4.24307 10.7567 10.0199 4.7209 9.64117 6.61331 4.68109 10.9758 11.0953 0 ]xshgrestore
gsave
35.9999 70.08 mo
420.72 70.08 li
420.72 34.0801 li
35.9999 34.0801 li
35.9999 70.08 li
clp
false sop
0 0 0 rgb
VSQHJK+MyriadPro-Regular*1 [19.92 0 0 -19.92 0 0 ]msf294.257 53.04 mo( )shgrestore
gsave
35.9999 70.08 mo
420.72 70.08 li
420.72 34.0799 li
35.9999 34.0799 li
35.9999 70.08 li
clp
false sop
0 0 0 rgb
VSQHJK+MyriadPro-Regular*1 [9.84 0 0 -9.84 0 0 ]msf41.28 67.68 mo( )shgrestore
gsave
420.72 70.08 mo
801 70.08 li
801 34.0799 li
420.72 34.0799 li
420.72 70.08 li
clp
false sop
0 0 0 rgb
%ADOBeginSubsetFont: ZRXPMX+MyriadPro-It Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /ZRXPMX+MyriadPro-It def/FontInfo 6 dict dup begin/Weight (Regular) def/ItalicAngle -11 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdef/UniqueID 0 def/FontBBox {-185 -250 1090 953} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 246 253] def/OtherBlues [400 407 259 266 -209 -198 -151 -144 -116 -111] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604553 def/StdHW [65] def/StdVW [88] def/StemSnapH [65] def/StemSnapV [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/space <1C60D8A8C9B8B44BA2> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSQHJL+MyriadPro-It /ZRXPMX+MyriadPro-It findfont ct_VMDictPut/VSQHJL+MyriadPro-It*1 [32{/.notdef}rp /space 223{/.notdef}rp]VSQHJL+MyriadPro-It nfVSQHJL+MyriadPro-It*1 [9.84 0 0 -9.84 0 0 ]msf799.95 43.68 mo( )shgrestore
gsave
35.9999 554.4 mo
420.72 554.4 li
420.72 526.08 li
35.9999 526.08 li
35.9999 554.4 li
clp
false sop
0 0 0 rgb
%ADOBeginSubsetFont: XJKAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginVSQHJK+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/copyright <1C60D8A8C9B658EF5BC8B2BCAD84F1A86ADD24EE460486E6DED9D879D9AE65C3A20EE28DEFEC9A21DA9F2062741A7AEDA3D8BFAA6F8EA24DBCAEC123FD196CC105B3A1C78C669CAB1DABF67D5FCAF5BEB40AFD0351A546376B2747B4779050F007FD4E68EB77B5B00B2248CEF6A7D9A63B1E6866AD3F297DF100A96ECCFBA401EA52921BEBC7E7464E3C9044B003AB2E5D71662E9F56E8596626B1765246D3C42B7537F75733924F51493F42C5A10C1747D563250E4DFEEFBFF585A8A54DB10366C7CC3A9E1B1D4D28DE7D78AEEE> |-/comma <1C60D8A8C9B89DB7C9B4756630BFB06276234AECCA3BC685A5120ED7E73C100A605F362E52A669> |-/hyphen <1C60D8A8C9B8391507657B8D1429650EAD682B1E1FA8FF445B393CF432> |-/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2338D279B9913C7A1D115D13271EAC> |-/slash <1C60D8A8C9B8151C27268C28135E46A906DDC9504EC2C635F21A9AA1DC0B003BE7> |-/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F35FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/colon <1C60D8A8C9B89DB76243278294073DF27AE5537531F4FA2681A370F5FCCA7E6E1FA86AF450F5EF64102F632D9C8870983D71709A25CADA9622AD5CCA20A33D7B0A8891ABF97827B8> |-/C <1C60D8A8C9B7F7BFE242671C9E817400744FCB1930C8B6D982C0603B0F56B2079EC8B4534AB9C74A497574D9EF71E8F51BC97EB8824D6E23EF8EFAA3DEBE8D568C2956BA1E496299B0678E1779132A604465EA4ECC38726918FAF069884E38826C83426FA3C94ADFC9002199C86D8D> |-/G <1C60D8A8C9B67B1690716FF04D0147EA5B51F2B65610FAF2358C724A65CE4A5C15BD93B6E6EA59AFCC3415F16C5AEB5B662300673D7883DCA60663F28B1374AECADD3956841307F73A4A3284F6D8D8ABF9017548C3B89BDD9012EBEC97E391C348B649F9A4B9E9FBB9333C1B69DB13F722AB4C9DC35502510C64773DA8C4CCB3ABFBFDCCB6F676B3960993837C4B63CC7BA56876924A0E6E> |-/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC346364003E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF69F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B95C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC56BF6AA691E1A081F9D254D> |-/h <1C60D8A8C9B790A816BA887E1DA4852044FABD5C80CA3A9E2E9C1F200BD200369E1A531F52CE66B5B19C492F0751A1C2858510B2E2690FB789B214E0E0C6537C1C71B0F5B79BE42FC591254AEEEA9BA5BA2F0A43A49AB11B4C> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADD471E1494375657D0074EB17A39D5C9C17257D613AB99E3> |-systemdict /gcheck known {setglobal} if end {end} ifendVSQHJK+MyriadPro-Regular /Encoding getdup 33 /copyright putdup 44 /comma putdup 45 /hyphen putdup 46 /period putdup 47 /slash putdup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 58 /colon putdup 67 /C putdup 71 /G putdup 72 /H putdup 103 /g putdup 104 /h putdup 112 /p putdup 119 /w putpop%ADOEndSubsetFont
/VSQHJK+MyriadPro-Regular*1 [32{/.notdef}rp /space /copyright 10{/.notdef}rp /comma /hyphen /period /slash /zero /one /two 2{/.notdef}rp /five 4{/.notdef}rp /colon 8{/.notdef}rp /C 3{/.notdef}rp /G /H 3{/.notdef}rp /L 5{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]VSQHJK+MyriadPro-Regular nfVSQHJK+MyriadPro-Regular*1 [9.84 0 0 -9.84 0 0 ]msf41.28 535.68 mo(! 2015)[6.76994 2.11566 5.12664 5.12664 5.12664 0 ]xsh70.6892 535.68 mo( )sh72.8091 535.68 mo(Global Collaboratory on the History of Labour Relations, 1500)[6.45992 2.35661 5.48576 5.69244 4.81663 2.35661 2.12057 5.8007 5.48576 2.35661 2.35661 4.81663 5.69244 5.48576 3.27174 4.81664 3.3111 5.48576 3.27176 4.70837 2.12057 5.48575 5.54477 2.12057 3.3111 5.54477 5.01357 2.12057 6.51892 2.33693 3.96057 3.3111 5.48576 3.27176 4.70837 2.12056 5.48576 2.91763 2.12057 4.71828 4.81662 5.69246 5.48575 5.50542 3.27176 2.12057 5.3775 5.01352 2.35663 4.81662 3.3111 2.33694 5.48575 5.54477 3.96054 2.07135 2.12054 5.13159 5.13153 5.13159 0 ]xsh327.052 535.68 mo(-)sh330.121 535.68 mo(2000)[5.12958 5.12961 5.12958 0 ]xsh350.641 535.68 mo( )sh41.28 547.68 mo(http://www.history)[5.54969 3.30618 3.30618 5.68752 2.06641 3.43418 3.43418 7.36024 7.36025 7.36024 2.06641 5.54968 2.34186 3.95564 3.30618 5.49067 3.26685 0 ]xshVSQHJK+MyriadPro-Regular*1 [3.84 0 0 -3.84 0 0 ]msf120.848 547.68 mo( )shVSQHJK+MyriadPro-Regular*1 [9.84 0 0 -9.84 0 0 ]msf121.696 547.68 mo(of)[5.48969 0 ]xshVSQHJK+MyriadPro-Regular*1 [4.8 0 0 -4.8 0 0 ]msf130.105 547.68 mo( )shVSQHJK+MyriadPro-Regular*1 [9.84 0 0 -9.84 0 0 ]msf131.165 547.68 mo(labour)[2.35954 4.81958 5.68556 5.48871 5.50839 0 ]xshVSQHJK+MyriadPro-Regular*1 [3.84 0 0 -3.84 0 0 ]msf158.304 547.68 mo( )shVSQHJK+MyriadPro-Regular*1 [9.84 0 0 -9.84 0 0 ]msf159.152 547.68 mo(relations.org)[3.26979 5.01158 2.35463 4.82449 3.30913 2.33498 5.49364 5.55263 3.9586 2.06935 5.49364 3.26979 0 ]xsh211.68 547.68 mo( )shgrestore
gsave
420.72 554.4 mo
801 554.4 li
801 526.08 li
420.72 526.08 li
420.72 554.4 li
clp
false sop
0 0 0 rgb
VSQHJL+MyriadPro-It*1 [9.84 0 0 -9.84 0 0 ]msf799.95 554.4 mo( )shgrestore
gsave
18 526.08 mo
801 526.08 li
801 70.08 li
18 70.08 li
18 526.08 li
clp
587.04 91.7279 mo
587.04 79.7722 596.732 70.08 608.688 70.08 cv
781.872 70.08 li
793.828 70.08 803.52 79.7722 803.52 91.7279 cv
803.52 498.192 li
803.52 510.148 793.828 519.84 781.872 519.84 cv
608.688 519.84 li
596.732 519.84 587.04 510.148 587.04 498.192 cv
587.04 91.7279 li
false sop
.815686 .847059 .909804 rgb
f
346.08 93.984 mo
346.08 80.7822 356.782 70.08 369.984 70.08 cv
561.216 70.08 li
574.418 70.08 585.12 80.7822 585.12 93.984 cv
585.12 495.936 li
585.12 509.138 574.418 519.84 561.216 519.84 cv
369.984 519.84 li
356.782 519.84 346.08 509.138 346.08 495.936 cv
346.08 93.984 li
f
242.64 80.1598 mo
242.64 74.5929 247.153 70.08 252.72 70.08 cv
333.36 70.08 li
338.927 70.08 343.44 74.5929 343.44 80.1598 cv
343.44 509.76 li
343.44 515.327 338.927 519.84 333.36 519.84 cv
252.72 519.84 li
247.153 519.84 242.64 515.327 242.64 509.76 cv
242.64 80.1598 li
f
139.44 80.1598 mo
139.44 74.5929 143.953 70.08 149.52 70.08 cv
230.16 70.08 li
235.727 70.08 240.24 74.5929 240.24 80.1598 cv
240.24 509.76 li
240.24 515.327 235.727 519.84 230.16 519.84 cv
149.52 519.84 li
143.953 519.84 139.44 515.327 139.44 509.76 cv
139.44 80.1598 li
f
36.2401 80.1598 mo
36.2401 74.5929 40.753 70.08 46.3199 70.08 cv
126.96 70.08 li
132.527 70.08 137.04 74.5929 137.04 80.1598 cv
137.04 509.76 li
137.04 515.327 132.527 519.84 126.96 519.84 cv
46.3199 519.84 li
40.753 519.84 36.2401 515.327 36.2401 509.76 cv
36.2401 80.1598 li
f
45.6 293.784 mo
45.6 291.783 47.2225 290.16 49.224 290.16 cv
120.696 290.16 li
122.698 290.16 124.32 291.783 124.32 293.784 cv
124.32 322.776 li
124.32 324.777 122.698 326.4 120.696 326.4 cv
49.224 326.4 li
47.2225 326.4 45.6 324.777 45.6 322.776 cv
cp
.309804 .505882 .741176 rgb
f
1.92 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
45.6 293.784 mo
45.6 291.783 47.2225 290.16 49.224 290.16 cv
120.696 290.16 li
122.697 290.16 124.32 291.783 124.32 293.784 cv
124.32 322.776 li
124.32 324.777 122.697 326.4 120.696 326.4 cv
49.224 326.4 li
47.2225 326.4 45.6 324.777 45.6 322.776 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZMPBAA+Calibri
Type42DictBegin
[<000100000008000800080008676c7966000000000000028c0000207c6865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000ec6c6f636100000000000001d40000
00786d617870000000000000024c000000206e616d65000000000000026c
0000002067646972000000000000000000000000000100000006028f1429
c8645f0f3cf50019080000000000bbeb7ccc00000000d18dca47fbfafd8b
09ec083600000009000200000000000000010000079efdda00000aa0fbfa
faa009ec00010000000000000000000000000000003b040e000001cf0000
04a100230444006103e800ac03ad00ac04fc00ac020400ac042800ac035d
00ac06d700ac052a00ac054c0063042200ac045800ac03ad004703e6000f
052200aa071e003d03d5005c043400990362005a0434006003fb005d0271
002503c400350434009901d6008503a3009901d600990664009904340099
0438005a0434009902ca00990321005102ae002104340094039d002205b8
003503770029039f0022022400bb0205009702730045026d0085026d007a
040e006b040e0052040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e005200000074007400b300ff0140
017b01bf01e20230025a02b103090343038003e30442047604b405110568
05bf0606065706a106f2077707be07f10840086308cf0916095009a709ee
0a4d0a9b0ae20b270b900bdd0c190c530c690c850cbd0cf40d550dba0df8
0e3c0e920f040f4b0fa00fa80fdc0fe4103e00010000003b0120001000c3
000700020010002f00860000000000000004000100000001001200010000
00000006000e0000414e44594e4c2b43616c6962726900>
[8317 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd

1 0 1 <> ZMPBAA+Calibri AddT42Char 
1 2180 16 <0001000ffffa03d7050e0022000001140e02232111140e0223222e023511
21222e0235343e023321321e0203d704090d08fe940814211918221408fe
94080d080505080d080384080d090404c4131c1108fb9e080c070505070c
08046208111c13131d120808121d>ZMPBAA+Calibri AddT42Char 
1 4652 32 <0002005affed03de03ca00130027000001140e0223222e0235343e023332
1e0207342e0223220e0215141e0233323e0203de3a73ad726fa56e363973
ac736fa56e37ae1b3e6a4f496944211b3f6a4f486a442001e56eb9864b42
7eb4726eb9864a427eb47c49826239345f824d4a826139345e82>ZMPBAA+Calibri AddT42Char 
1 5274 36 <00010021ffef026d04ad003a000025140e0423222e02351123222635343e
02333335343e0233321e02151533321e02151406232311141633323e0233
321e02026d081020292e174664401d7e0f1205080d087d07132018192012
08e7080c0904120fe7374717241c1408050905045b1d22100e0906254b73
4e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d5f09
0a09050e1800>ZMPBAA+Calibri AddT42Char 
1 2594 19 <0002005cffed033f03ca0033004000002514060623222626353506062322
2e0235343e02333335342e0223220e0223222e0235343e0433321e021507
23220e0215141633323637033f101c1b1a1f0e3b91514773512d3e74a869
7c16314e393d6149310c080c0904071b4256663461885426a48d4464421f
5950416f3d180c0c06060c0c5a3f46254666414c704a25463450351b1d23
1d0810190f191d1a231d132c557e54c4172d3f2946534244>ZMPBAA+Calibri AddT42Char 
1 4224 29 <00010099fffa013e05710015000025140e0223222e023511343e0233321e
0215013e0812201918201307071320181920120819080b080404080b0805
38080c080404080c0800>ZMPBAA+Calibri AddT42Char 
1 4768 33 <00020099fe9403d503ca002a003d000001140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0207342e0223220e020711
161633323e0203d53363925e2844414024081220191820130706121c1415
1b1207294c4d512d628a5728ae15335640203e404627447a433e59371a01
e976bc834710223423fe3e080c080404080c0804e9090b080303080b0979
2a3e29154c84af754581643c13294331fe9a53583c647c00>ZMPBAA+Calibri AddT42Char 
1 5430 37 <00010094ffed039c03bc0032000025140e0223222e023535060623222e02
3511343e0233321e021511141e023332363711343e0233321e0215039c07
121d15171d11064d964d5a7b4c210714201818201308172f48303e7b4507
141f191820120919080b080404080b0877554e3c6789620222080b090303
090b08fdf44f5f432558550275080b090303090b0800>ZMPBAA+Calibri AddT42Char 
1 3964 27 <00020085fffa0151052f00150021000025140e0223222e023511343e0233
321e0215131406232226353436333216013e081220191820130707132018
19201208132c3b3a2b2c3b3a2b19080b080404080b080384070c08040408
0c0701303a2a29393a2a2900>ZMPBAA+Calibri AddT42Char 
1 4510 31 <00010099fffa03a003ca0032000025140e0223222e023511342e02232206
0711140e0223222e023511343e0233321e021515363633321e021503a008
12201819201208182e49303e7c44081220191820130706121c17161d1007
4c974d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b0804
04080b080384080b090303090b0877554f3d66896000>ZMPBAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e00000111211101112111
01140e020707140623222e02352726363333323e0235342623220e022322
2e02353436373e0333321e0203140e0223222e0235343e0233321e020103
d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c251053
5b253c2e1d0703070603050807283742224b6c4522da07111d15161d1208
08121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f240398
0a0802040606b81e18192a3b2149560f1310040b13101116080712110c28
445cfd86151c120808121c15151d120808121dfd4d00>ZMPBAA+Calibri AddT42Char 
ZMPBAA+Calibri /CharStrings get begin
/g1 1 def
/g16 16 def
/g32 32 def
/g36 36 def
/g19 19 def
/g29 29 def
/g33 33 def
/g37 37 def
/g27 27 def
/g31 31 def
end
ZMPBAA+Calibri /Encoding get
dup 33 /g1 put
dup 34 /g16 put
dup 35 /g32 put
dup 36 /g36 put
dup 37 /g19 put
dup 38 /g29 put
dup 39 /g33 put
dup 40 /g37 put
dup 41 /g27 put
dup 42 /g31 put
pop
end
%ADOEndSubsetFont
/VSQHJM+Calibri /ZMPBAA+Calibri findfont ct_VMDictPut/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 213{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf73.2261 305.168 mo("#$%&!)[4.79999 6.23991 3.84008 5.76005 2.64005 0 ]xsh58.5861 318.128 mo('#'\(&%$\)#*)[6.23992 6.23991 6.23993 6.23993 2.64005 5.76004 4.08009 2.64005 6.23991 0 ]xsh124.202 308.272 mo
155.029 175.933 li
.239216 .4 .588235 rgb
25400 lw
gsave
[1.78636e-05 -7.6687e-05 7.6687e-05 1.78636e-05 124.112 308.251 ]ct
@
grestore newpath
155.04 161.328 mo
155.04 159.313 156.673 157.68 158.688 157.68 cv
331.392 157.68 li
333.407 157.68 335.04 159.313 335.04 161.328 cv
335.04 190.512 li
335.04 192.527 333.407 194.16 331.392 194.16 cv
158.688 194.16 li
156.673 194.16 155.04 192.527 155.04 190.512 cv
cp
.6 .894118 .0705882 rgb
f
1.92 lw
[5.76 1.92 ] 0 dsh
155.04 161.328 mo
155.04 159.313 156.673 157.68 158.688 157.68 cv
331.392 157.68 li
333.407 157.68 335.04 159.313 335.04 161.328 cv
335.04 190.512 li
335.04 192.527 333.407 194.16 331.392 194.16 cv
158.688 194.16 li
156.673 194.16 155.04 192.527 155.04 190.512 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 1378 11 <000100acfffa047e0511003d000025140e022323222e0227012626272316
161511140e0223222e02351134363333321e0217011e0317332626351134
3e0233321e0215047e0d151a0d371a27232315fe6820411c02020208131f
18181f12082c1a521d271f1d11013a1d3632311801020108131f19162012
0847141c12080b1d322702e0397d3b48964afcf3070d070505070d0704aa
28220a17291ffdc83463605d2f4fab4f02be070c090404090c07>VSQHJM+Calibri AddT42Char 
1 6354 44 <0001004501b4022e023d000f0000011406232122263534363321321e0202
2e1211fe5e1212121201a2080d090501f9271e1f26261e06111a>VSQHJM+Calibri AddT42Char 
1 5710 39 <00010035fffa058403bc0045000001140607010e0323222e022703270703
0e0323222e022701262635343e0233321e0217131737133e0333321e0217
131737133e0333321e0205840405fef7030d17281e1f2a190c03bd0202af
030d1a291e1f27190c03fef90504081320171c22120803d90202c7020912
1f19181f120802d70201d6020913211a181d1107039f07140ffca90b0e08
0304080e0a028d0909fd730b0e080304080e0a03570f1407090b07020307
0d09fd1a090902e6090d070303070c08fd18090902e6090d070302080a00
>VSQHJM+Calibri AddT42Char 
1 4942 34 <00010099fffa02a703ca0033000001140e0223222e0223220e020711140e
0223222e023511343e0233321e0215153e0333321e0602a7020609080817
1d24151930353a23081220191820130706121c17161d100725413a391d0d
21241d0c0403010362161e1109090908142e4c37fdb0080b080404080b08
0384080b090303090b08833644270f03080a0a090e1b>VSQHJM+Calibri AddT42Char 
1 4066 28 <00010099fffa037c05710034000025140e0223222e02270111140e022322
2e023511343e0233321e021511013e0333321e021514060701011616037c
0813221a1b23180f06fe8408122019182013070713201819201208015408
12192218192215090d0ffeba016e0d0b1a080c080403070d0901f2fe0d08
0b080404080b080538080c080404080c08fcd201760a0d090303070b090c
1810febafe251115>VSQHJM+Calibri AddT42Char 
1 3556 25 <00030035fe93038903c8003e004e005f00000114062323161615140e0223
222627060615141617171e0315140e0223222e0235343e02372626353436
37262635343e023332161721321601342623220e0215141633323e021334
2627270e0315141633323e020389130f81231c325d804e37631b12174136
eb4370522e346ba6716d99622c10213120312f32251f24345c814c29471f
01101111fefe655d30472f17655b31482f17535f51e92029180984764b65
3e1b0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e7055
3125405934213e383319194c2c3d6026255d424d7a542d090821fef15c67
2038492859661f3748fd5e3a3f0208192d29281541431d303e00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g11 11 def
/g44 44 def
/g39 39 def
/g34 34 def
/g28 28 def
/g25 25 def
end
VSQHJM+Calibri /Encoding get
dup 43 /g11 put
dup 44 /g44 put
dup 45 /g39 put
dup 46 /g34 put
dup 47 /g28 put
dup 48 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 207{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf213.575 179.426 mo(+#*)[7.67995 6.23991 0 ]xsh233.735 179.426 mo(,)sh237.335 179.426 mo(-#./\)*0)[8.63995 6.23991 4.07999 5.52002 2.64005 6.23993 0 ]xsh334.961 175.938 mo
329.249 175.394 li
.6 .894118 .0705882 rgb
25400 lw
[] 0 dsh
gsave
[-7.83857e-05 -7.46266e-06 7.46266e-06 -7.83857e-05 334.953 176.03 ]ct
@
grestore newpath
329.28 174.264 mo
329.304 174.24 li
329.496 174.24 li
329.52 174.264 li
329.52 176.616 li
329.496 176.64 li
329.304 176.64 li
329.28 176.616 li
cp
.278431 .454902 .670588 rgb
f
1.92 lw
329.28 174.264 mo
329.304 174.24 li
329.496 174.24 li
329.52 174.264 li
329.52 176.616 li
329.496 176.64 li
329.304 176.64 li
329.28 176.616 li
cp
.815686 .847059 .909804 rgb
@
329.419 175.394 mo
355.932 159.667 li
.6 .894118 .0705882 rgb
25400 lw
gsave
[6.77211e-05 -4.01729e-05 4.01729e-05 6.77211e-05 329.372 175.315 ]ct
@
grestore newpath
356.04 155.496 mo
356.04 154.913 356.513 154.44 357.096 154.44 cv
573.144 154.44 li
573.727 154.44 574.2 154.913 574.2 155.496 cv
574.2 163.944 li
574.2 164.527 573.727 165 573.144 165 cv
357.096 165 li
356.513 165 356.04 164.527 356.04 163.944 cv
cp
f
1.2 lw
356.04 155.496 mo
356.04 154.913 356.513 154.44 357.096 154.44 cv
573.144 154.44 li
573.727 154.44 574.2 154.913 574.2 155.496 cv
574.2 163.944 li
574.2 164.527 573.727 165 573.144 165 cv
357.096 165 li
356.513 165 356.04 164.527 356.04 163.944 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7152 50 <000100ae0000039f0517002e000025140e022321222e0235343e02332111
070606262635343e0237253e0333321e02151133321e02039f060a0d07fd
5c070c0b0606090d08010efa13170e0503060b09012a040c121812182012
06ea080e090544131a100707101a13121a110903d8950a040d1e17111810
0c06bf0304040104070b06fb8f09111a>VSQHJM+Calibri AddT42Char 
1 6194 42 <000200bbfff7018d039500130027000001140e0223222e0235343e023332
1e0211140e0223222e0235343e0233321e02018d0919281f202818090918
28201f2819090919281f20281809091828201f2819090320202c1b0b0b1b
2c20222d1b0b0b1b2dfd28212c1b0b0b1b2c21212d1a0c0c1a2d>VSQHJM+Calibri AddT42Char 
1 358 3 <00010061fff0040c051e0039000025140e0623222e0235343e0233321e06
15140e0223222e0223220e0215141e0233323e0233321e02040c02050814
405f7b497ecb8f4d5396d17f386a5a461b08050304080b080e324f714f56
8d64373563905b4d7351340f070a0603b71018120e1429271b54a4f19da1
fcaf5c15202a1b0e131a12141c1309272f274586c17c7bbd7f41262f2606
111e>VSQHJM+Calibri AddT42Char 
1 2942 21 <0001005affed032003c90035000025140e0623222e0235343e0233321e06
15140623222e0223220615141e0233323e0233321e020320020507193c4b
582f61966535417199592b51443518090602120d0f273c553a777f21405d
3c39563f2b0c070a0703a21119110d19251d12407bb37585bf7a3b101a22
180e131812271f212821b7ae5783582b242b2308131d>VSQHJM+Calibri AddT42Char 
1 2768 20 <00020099ffed03d50571002a003d000001140e0223222e022715140e0223
222e023511343e0233321e0215113e0333321e0207342e0223220e020711
161633323e0203d53363905d2b4946462708121b15141c12060713201819
201208284b484828628b5728ae15345640203e404527447c433e58371901
e775bb844611263a296e080c070404070c080538080c080404080c08fde5
293823104e83b0754582643d122a4232fe9953573c637b00>VSQHJM+Calibri AddT42Char 
1 3246 23 <0002005dffed039903ca002b003400000114062321141e0233323e023332
1e0215140e0623222e0235343e0233321e021527362623220e0207039927
19fdb21e4670514064492f0c070b06030203070b365671406fa7723a3c71
a0636a95602da60379773d5c3e2202020227214b78562e151a15070e1912
0d130f0c0b1918133e7ab87a74b9814544739b581382942e4c653700>VSQHJM+Calibri AddT42Char 
1 5920 40 <00010029fffa034b03bc002f0000251614060623222e022703030e032322
2626363701012626363633321e021713133e033332161606070103430813
271f1e23150b04d8d7040b15221c1d251101090118fef708011327201d23
140a04cdd0040a111f1b1d25120209fef92c0e130c0503070b070165fe9b
070b0703050c130e01b701a70e130d0403060a07feb1014f060a0703040b
140ffe5e>VSQHJM+Calibri AddT42Char 
1 3084 22 <00020060ffed039c056d00260039000025140e0223222e02353506062322
2e0235343e023332161711343e0233321e021503262623220e0215141e02
33323e0237039c07111c14151c120847995b638c57283262915f4f834007
141f1819201209a6437d443f58371915345641213d40462719080c070404
070c08774d564d83b16274bb84474543020b070d070505070d07fd455357
3c627c404482653d122a4331>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g50 50 def
/g42 42 def
/g3 3 def
/g21 21 def
/g20 20 def
/g23 23 def
/g40 40 def
/g22 22 def
end
VSQHJM+Calibri /Encoding get
dup 49 /g50 put
dup 50 /g42 put
dup 51 /g3 put
dup 52 /g21 put
dup 53 /g20 put
dup 54 /g23 put
dup 55 /g40 put
dup 56 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 199{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.551 162.538 mo(12!!3%**#$!-#./!#.)[5.28003 2.88293 2.39709 2.39709 5.52292 5.03717 5.52283 5.5228 5.52283 3.60101 2.39709 7.4342 5.5228 3.60095 4.80481 2.39713 5.5228 0 ]xsh450.151 162.538 mo(4%**#$!56)[4.55984 5.03503 5.52072 5.52069 5.52069 3.59891 2.16269 5.52069 0 ]xsh495.03 162.538 mo(67'64$68!$#!-#./)[5.28 4.56189 5.52283 5.27997 4.56201 3.60101 5.28003 5.52277 2.15424 3.60107 5.52277 2.15424 7.4342 5.52277 3.60095 0 ]xsh329.419 175.394 mo
355.932 174.985 li
.6 .894118 .0705882 rgb
25400 lw
gsave
[7.87308e-05 -1.21511e-06 1.21511e-06 7.87308e-05 329.418 175.302 ]ct
@
grestore newpath
356.04 170.856 mo
356.04 170.273 356.513 169.8 357.096 169.8 cv
573.144 169.8 li
573.727 169.8 574.2 170.273 574.2 170.856 cv
574.2 179.304 li
574.2 179.887 573.727 180.36 573.144 180.36 cv
357.096 180.36 li
356.513 180.36 356.04 179.887 356.04 179.304 cv
cp
f
1.2 lw
356.04 170.856 mo
356.04 170.273 356.513 169.8 357.096 169.8 cv
573.144 169.8 li
573.727 169.8 574.2 170.273 574.2 170.856 cv
574.2 179.304 li
574.2 179.887 573.727 180.36 573.144 180.36 cv
357.096 180.36 li
356.513 180.36 356.04 179.887 356.04 179.304 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7288 51 <000100720000039c0521003e000025140e022321222e0235343e0237133e
0335342e0223220e0223222e0235343e0633321e0215140e02070721321e
02039c05090f09fd350e150f07030a0f0cfb576939121c3550343d614931
0c070b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a12
1c130907101e16141e17170d010a5c9278622b2b4d3a2222282208121e15
0f16100e15242318355c7a453e7b8faf72d609121b00>VSQHJM+Calibri AddT42Char 
1 232 2 <00020023fffa047e0514002200260000251616060623222e02270321030e
03232226263637013e0333321e0217072303210475080110251f1f251309
046ffde66a030a13231c1d250f010801b2040d19271e202a1a0e047b01df
01c23d161b0e0403070c09013bfec9090d0904050e1b1604b20b0e080303
080f0b8dfd7b>VSQHJM+Calibri AddT42Char 
1 3394 24 <00010025fffa02860578003c000001140e0223222e0223220e0215153332
1e02151406232311140e0223222e02351123222635343e02333335343e02
33321e0402860405080607151e291b2534200ec9080b0905120fc9081320
18182013087f101004080c087f23486d4a2342240c0803050f13170e0509
0b091833513a6207111a132420fceb080b080404080b0803152024131a11
075d5e8756290d0f0c131b00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g51 51 def
/g2 2 def
/g24 24 def
end
VSQHJM+Calibri /Encoding get
dup 57 /g51 put
dup 58 /g2 put
dup 59 /g24 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 196{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.551 177.855 mo(92!!:;;&\(6*$)[5.28003 2.88293 2.39709 2.39709 5.99802 3.11514 3.11511 2.39716 5.52283 5.28 5.52283 0 ]xsh329.419 175.394 mo
355.932 189.951 li
.6 .894118 .0705882 rgb
25400 lw
gsave
[6.90212e-05 3.78957e-05 -3.78957e-05 6.90212e-05 329.464 175.313 ]ct
@
grestore newpath
356.04 185.736 mo
356.04 185.153 356.513 184.68 357.096 184.68 cv
573.144 184.68 li
573.727 184.68 574.2 185.153 574.2 185.736 cv
574.2 194.184 li
574.2 194.767 573.727 195.24 573.144 195.24 cv
357.096 195.24 li
356.513 195.24 356.04 194.767 356.04 194.184 cv
cp
f
1.2 lw
356.04 185.736 mo
356.04 185.153 356.513 184.68 357.096 184.68 cv
573.144 184.68 li
573.727 184.68 574.2 185.153 574.2 185.736 cv
574.2 194.184 li
574.2 194.767 573.727 195.24 573.144 195.24 cv
357.096 195.24 li
356.513 195.24 356.04 194.767 356.04 194.184 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7460 52 <00010067ffed039205210058000001140e0223222e0635343633321e0233
323e0235342e022323222e0235343e023333323e0235342e0223220e0223
222e0235343e0633321e0215140e0207151e0303923e74aa6b4171583a0f
0806030e0d0935536f44426444222b53794d7b080f0b07060b0e09714269
49271a3451353a614c320a070b0703020608133a556f405a885b2d203e5a
3b436f502d0172598f6637151d1f0e0e141d15241c202520223e55323758
402207101a1513190f07224059372849361f232823050f1b160f17110e13
2423182e5475473d6951390b020735506b00>VSQHJM+Calibri AddT42Char 
1 2284 17 <000100aaffed04790514002b000001140e0223222e023511343e0233321e
021511141e0233323e023511343e0233321e021504794580b8756bb07e44
0814201a182213082c5375494b75512b081421191821130901de76b98042
3e79b6770323080c070505070c08fcf25a86592d2c5882570317080c0705
05070c08>VSQHJM+Calibri AddT42Char 
1 4294 30 <00010099fffa05d003ca0050000025140e0223222e023511342e02232206
0711140e0223222e023511342e022322060711140e0223222e023511343e
0233321e021515363633321e02173e0333321e021505d008122018192013
08142c442e3973450813201817211307162c432e39744408122019182013
0706121c17161d10074c8f4938594430102d514b47245776491f19080b08
0404080b080223395e44245855fd8b080b080404080b080223395e442458
55fd8b080b080404080b080384080b090303090b0877554f1a2f41283144
2a133d66894c>VSQHJM+Calibri AddT42Char 
1 6074 41 <00010022fe94037c03bc002400002103060623222e023713262627012634
363633321e02170133133e023332161614070233780631321a201102067c
091003febf0810241e1e22140905010103f8061122201c241106feb51011
050c140e013904120a035c15180e0503080f0dfd2e02d6130b05050e1812
>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g52 52 def
/g17 17 def
/g30 30 def
/g41 41 def
end
VSQHJM+Calibri /Encoding get
dup 60 /g52 put
dup 61 /g17 put
dup 62 /g30 put
dup 63 /g41 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 192{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.551 192.82 mo(<2!!=*6>'&#?68)[5.28003 2.88293 2.39709 2.39709 6.71616 5.5228 5.28003 8.4057 5.52283 2.39716 5.5228 4.80484 5.28 0 ]xsh124.202 308.272 mo
155.184 246.618 li
.239216 .4 .588235 rgb
25400 lw
gsave
[3.53556e-05 -7.03562e-05 7.03562e-05 3.53556e-05 124.119 308.23 ]ct
@
grestore newpath
155.28 232.128 mo
155.28 230.113 156.913 228.48 158.928 228.48 cv
230.112 228.48 li
232.127 228.48 233.76 230.113 233.76 232.128 cv
233.76 261.312 li
233.76 263.327 232.127 264.96 230.112 264.96 cv
158.928 264.96 li
156.913 264.96 155.28 263.327 155.28 261.312 cv
cp
.937255 .439216 .239216 rgb
f
1.92 lw
155.28 232.128 mo
155.28 230.113 156.913 228.48 158.928 228.48 cv
230.112 228.48 li
232.127 228.48 233.76 230.113 233.76 232.128 cv
233.76 261.312 li
233.76 263.327 232.127 264.96 230.112 264.96 cv
158.928 264.96 li
156.913 264.96 155.28 263.327 155.28 261.312 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 1792 14 <000200acfffa040b050e00360044000025140e0223222e0227032e032323
11140e0223222e023511343633213216171e0315140e02071e0317131616
01342627262623231133323e02040b0614241e1a21140b0477152d3e543b
7309132119192114082917011331411a4b734e2723425c3920342d281474
0e08fefd4450193f3391a84463421f1a080c08040409100c013134573f23
fdd9080c070505070c0804ae271f05030d38566f4341674f3a140e2b3c4e
31fee3241d03854c69170706fe4c213b5000>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g14 14 def
end
VSQHJM+Calibri /Encoding get
dup 64 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 191{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf169.574 243.516 mo(@64\)'.#4%&!)[6.23999 6 5.04005 2.64005 6.23993 3.83998 6.23991 5.04005 5.76004 2.64006 0 ]xsh178.695 256.476 mo(&%5#\(.)[2.64005 5.76004 6.23993 6.23991 6.23993 0 ]xsh233.748 246.621 mo
256.539 246.283 li
.937255 .439216 .239216 rgb
25400 lw
gsave
[7.87315e-05 -1.16534e-06 1.16534e-06 7.87315e-05 233.747 246.528 ]ct
@
grestore newpath
256.56 231.648 mo
256.56 229.633 258.193 228 260.208 228 cv
331.392 228 li
333.407 228 335.04 229.633 335.04 231.648 cv
335.04 260.832 li
335.04 262.847 333.407 264.48 331.392 264.48 cv
260.208 264.48 li
258.193 264.48 256.56 262.847 256.56 260.832 cv
cp
f
1.92 lw
256.56 231.648 mo
256.56 229.633 258.193 228 260.208 228 cv
331.392 228 li
333.407 228 335.04 229.633 335.04 231.648 cv
335.04 260.832 li
335.04 262.847 333.407 264.48 331.392 264.48 cv
260.208 264.48 li
258.193 264.48 256.56 262.847 256.56 260.832 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 758 6 <000100acfffa04500514002f000025140e0223222e0235112111140e0223
222e023511343e0233321e0215112111343e0233321e0215045008142118
1a201408fdb308142119182214080814221819211408024d0814201a1821
14081a080c070505070c08023efdc2080c070505070c0804da080c070505
070c08fdfa0206080c070505070c0800>VSQHJM+Calibri AddT42Char 
1 5084 35 <00010051ffed02ce03ca0049000001140e0223222e0435343e0233321e02
33323e0235342e0635343e0233321e0615140e0223222e0223220e021514
1e0602ce335e824e30574530160a04060b070b2b3f56382a44321b274050
5551402729527b5224483a291507030303070a06092236492f2a40291528
405255534027010e456c4a260f171914241f131a10071b201b1223362526
34281f222b3e563c3561492c0c1215100c0f161011191007161916132330
1c27352820222a3c5400>VSQHJM+Calibri AddT42Char 
1 3822 26 <00010099fffa03a005710032000025140e0223222e023511342e02232206
0711140e0223222e023511343e0233321e021511363633321e021503a008
12201819201208182e49303e7c4408122019182013070713201819201208
4790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b0804
04080b080538080c080404080c08fde54b493d668961>VSQHJM+Calibri AddT42Char 
1 6410 45 <00010085fea701f3058b00230000010602151412171616060623222e0227
2e0335343e02373e0333321e0201ef5f5d5f5b05010e1d19121a130c0336
52381c1f3952330109101c16171c10020562c9fe59d6d7fe5acb0c110b05
0206080566d1d8dd7171dcd9d26704060603060a1000>VSQHJM+Calibri AddT42Char 
1 6522 46 <0001007afea701e7058b0021000001140e02070e03232226263637361235
340227263e0233321e0217161201e71c385136030c131a121a1d0d01055c
5e5e5e0402101c17151c1108026775021971ddd8d16605080602050b110c
ca01a7d7d601a7c909100a0603060604cdfe4f00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g6 6 def
/g35 35 def
/g26 26 def
/g45 45 def
/g46 46 def
end
VSQHJM+Calibri /Encoding get
dup 65 /g6 put
dup 66 /g35 put
dup 67 /g26 put
dup 68 /g45 put
dup 69 /g46 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 186{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf263.73 249.771 mo(A#\(B6C#&8DBE)[7.44 6.2399 6.23993 4.80008 6.00003 6.23993 6.2399 2.64005 6.23993 3.59991 4.80008 0 ]xsh335.103 246.283 mo
355.711 215.456 li
.937255 .439216 .239216 rgb
25400 lw
gsave
[4.37587e-05 -6.54613e-05 6.54613e-05 4.37587e-05 335.026 246.232 ]ct
@
grestore newpath
355.8 211.416 mo
355.8 210.833 356.273 210.36 356.856 210.36 cv
573.144 210.36 li
573.727 210.36 574.2 210.833 574.2 211.416 cv
574.2 219.864 li
574.2 220.447 573.727 220.92 573.144 220.92 cv
356.856 220.92 li
356.273 220.92 355.8 220.447 355.8 219.864 cv
cp
f
1.2 lw
355.8 211.416 mo
355.8 210.833 356.273 210.36 356.856 210.36 cv
573.144 210.36 li
573.727 210.36 574.2 210.833 574.2 211.416 cv
574.2 219.864 li
574.2 220.447 573.727 220.92 573.144 220.92 cv
356.856 220.92 li
356.273 220.92 355.8 220.447 355.8 219.864 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7688 53 <00020030fffa03d30514002a002e0000011406232311140e0223222e0235
1121222e0235343e0237013e0333321e0215113332160123012103d31412
920814201918201307fdea0c100d0502060a0701d205131e2c1e21311e10
921115fea102fe5b01a701702126fef0080b080404080b08011006101e18
131e19170d0312080c080305080d09fcc62302e9fd3a>VSQHJM+Calibri AddT42Char 
1 1120 9 <000100ac0000034b0514001a000025140e02232122263511343e0233321e
02151121321e02034b04090d09fdc41729081422181921140801d0090d09
044b141b13091f2704ae080c070505070c08fba109111c00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g53 53 def
/g9 9 def
end
VSQHJM+Calibri /Encoding get
dup 70 /g53 put
dup 71 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 184{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.77 218.327 mo(F%2!!G6%8\)*0!'.#8\(46.B)[5.28003 5.03717 2.88293 2.15421 2.39709 4.31903 5.28 5.03717 5.52283 2.39716 5.5228 5.03705 2.39709 5.52283 3.60095 5.5228 5.52283 5.5228 4.56198 5.28 3.60095 0 ]xsh335.103 246.283 mo
355.711 230.973 li
.937255 .439216 .239216 rgb
25400 lw
gsave
[6.32058e-05 -4.69578e-05 4.69578e-05 6.32058e-05 335.048 246.209 ]ct
@
grestore newpath
355.8 226.776 mo
355.8 226.193 356.273 225.72 356.856 225.72 cv
573.144 225.72 li
573.727 225.72 574.2 226.193 574.2 226.776 cv
574.2 235.224 li
574.2 235.807 573.727 236.28 573.144 236.28 cv
356.856 236.28 li
356.273 236.28 355.8 235.807 355.8 235.224 cv
cp
f
1.2 lw
355.8 226.776 mo
355.8 226.193 356.273 225.72 356.856 225.72 cv
573.144 225.72 li
573.727 225.72 574.2 226.193 574.2 226.776 cv
574.2 235.224 li
574.2 235.807 573.727 236.28 573.144 236.28 cv
356.856 236.28 li
356.273 236.28 355.8 235.807 355.8 235.224 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 964 8 <000100acfffa03f805140033000025140e0223222626270111140e022322
2e023511343e0233321e021511013e0333321e02151406070101161603f8
0714221b232c1607fe240814211918221408081422181921140801ca0610
17211a1a2013070d12fe5301ce11071c080d080506100a0287fd79070d07
0505070d0704da080c070505070c08fdc1023f090c070405080c070d1a17
fdfffd9a1a13>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g8 8 def
end
VSQHJM+Calibri /Encoding get
dup 72 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 183{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.77 233.844 mo(F52!!H\)*!'.#8\(46.B)[5.28003 5.5228 2.88297 2.15421 2.39709 5.52292 2.39716 5.52283 2.39709 5.52283 3.60095 5.5228 5.5228 5.52283 4.56195 5.28003 3.60095 0 ]xsh1.99996 lw
335.104 246.283 mo
355.711 246.283 li
.937255 .439216 .239216 rgb
@
355.8 242.376 mo
355.8 241.793 356.273 241.32 356.856 241.32 cv
573.144 241.32 li
573.727 241.32 574.2 241.793 574.2 242.376 cv
574.2 250.824 li
574.2 251.407 573.727 251.88 573.144 251.88 cv
356.856 251.88 li
356.273 251.88 355.8 251.407 355.8 250.824 cv
cp
f
1.2 lw
355.8 242.376 mo
355.8 241.793 356.273 241.32 356.856 241.32 cv
573.144 241.32 li
573.727 241.32 574.2 241.793 574.2 242.376 cv
574.2 250.824 li
574.2 251.407 573.727 251.88 573.144 251.88 cv
356.856 251.88 li
356.273 251.88 355.8 251.407 355.8 250.824 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7830 54 <00010065ffed0396050e003e000001140e0223222e0635343e0233321e02
33323e0235342e02232206232226351134363321321e0215140623211136
3633321e0203964680b16c3c6c54360f06050203080b070a2a4769484370
512e27517c563d58261c181f1d023d080f0a051412fe1d2349306fa66f39
01a068a26f3a1119180e0c111a12111b1108191d1a2044674a3e5f3f1f0c
1a25020f212009121c132428fe95050235618a00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g54 54 def
end
VSQHJM+Calibri /Encoding get
dup 73 /g54 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 182{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.33 249.279 mo(I2!!H\)*!*#*)[5.28003 2.88293 2.39709 2.39709 5.52292 2.39719 5.5228 2.39709 5.52283 5.5228 0 ]xsh413.69 249.279 mo(,)sh416.81 249.279 mo('.#8\(46.B)[5.51962 3.59778 5.51965 5.51965 5.51962 4.55881 5.27686 3.59778 0 ]xsh335.104 246.283 mo
355.711 261.317 li
.937255 .439216 .239216 rgb
25400 lw
gsave
[6.36121e-05 4.64059e-05 -4.64059e-05 6.36121e-05 335.158 246.208 ]ct
@
grestore newpath
355.8 257.256 mo
355.8 256.673 356.273 256.2 356.856 256.2 cv
573.144 256.2 li
573.727 256.2 574.2 256.673 574.2 257.256 cv
574.2 265.704 li
574.2 266.287 573.727 266.76 573.144 266.76 cv
356.856 266.76 li
356.273 266.76 355.8 266.287 355.8 265.704 cv
cp
f
1.2 lw
355.8 257.256 mo
355.8 256.673 356.273 256.2 356.856 256.2 cv
573.144 256.2 li
573.727 256.2 574.2 256.673 574.2 257.256 cv
574.2 265.704 li
574.2 266.287 573.727 266.76 573.144 266.76 cv
356.856 266.76 li
356.273 266.76 355.8 266.287 355.8 265.704 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 6632 47 <0002006bffed03bd052000340048000001140e0223222e0435343e043332
1e0615140e0223222e0223220e02073e0333321e0207342e0223220e0207
141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c402c0e
07040201070b090b26364d335d865529031a414d563169905926ae17365a
42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53aa9e8b
673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f396589603a
5f42240d171f1281ae692d305165>VSQHJM+Calibri AddT42Char 
1 8000 55 <ffff006bffed03bd05200206002f0000>VSQHJM+Calibri AddT42Char 
1 1990 15 <00010047ffed036305210049000001140e0223222e0435343e0233321e02
33323e0235342e0635343e0233321e0615140e0223222e0223220e021514
1e0603634377a15d416f573b170b04080c080e3350714a385d4324325269
6e6852333b6991542b574d3c1306040203060b070b2f445d3a3650341a32
536a6e6a5333016b5b8e633216202218251f161d12072228231e37503337
4e3b31333e54714f517f562d0f191f130b111813121c13091c231d1d3042
25364e3c32333d537100>VSQHJM+Calibri AddT42Char 
1 5572 38 <00010022fffa037b03bc002c000001140e0207010e0323222e0227012e02
35343e0233321e0217131737133e0333321e02037b01020302fecd040d1a
281e1e28190e04fece04050108131f171d23130904fe0403fb020a13211b
171e1107039f04090a0c07fca90b0e080304080e0a03570c120903080c07
0203080c09fd1a0c0c02e6090c080302080b>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g55 55 def
/g15 15 def
/g38 38 def
end
VSQHJM+Calibri /Encoding get
dup 74 /g55 put
dup 75 /g15 put
dup 76 /g38 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 179{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.33 264.186 mo(J2!!K6.L%*$B)[5.28003 2.88293 2.39709 2.39709 4.80481 5.28 3.60095 4.80475 5.03717 5.52283 3.60101 0 ]xsh335.104 246.283 mo
355.711 276.056 li
.937255 .439216 .239216 rgb
25400 lw
gsave
[4.48129e-05 6.47442e-05 -6.47442e-05 4.48129e-05 335.18 246.231 ]ct
@
grestore newpath
355.8 271.896 mo
355.8 271.313 356.273 270.84 356.856 270.84 cv
573.144 270.84 li
573.727 270.84 574.2 271.313 574.2 271.896 cv
574.2 280.344 li
574.2 280.927 573.727 281.4 573.144 281.4 cv
356.856 281.4 li
356.273 281.4 355.8 280.927 355.8 280.344 cv
cp
f
1.2 lw
355.8 271.896 mo
355.8 271.313 356.273 270.84 356.856 270.84 cv
573.144 270.84 li
573.727 270.84 574.2 271.313 574.2 271.896 cv
574.2 280.344 li
574.2 280.927 573.727 281.4 573.144 281.4 cv
356.856 281.4 li
356.273 281.4 355.8 280.927 355.8 280.344 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 8016 56 <00010063fffa03af050e001f000001140e0207010e032322262636370121
222635343e023321321e0203af03050906fe2e050f17241a222611020601
eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c0f0903060d
130d044a2824131c130906121c00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g56 56 def
end
VSQHJM+Calibri /Encoding get
dup 77 /g56 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 178{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.33 278.925 mo(M2!!@68\)B$.\)5\($\)L6!&%5#\(.6.B)[5.28003 2.88293 2.39709 2.39709 5.76575 5.28003 5.5228 2.39716 4.07623 3.60104 3.60095 2.39716 5.52283 5.5228 3.60104 2.39716 4.80475 5.28003 2.15421 2.39716 5.03717 5.52283 5.5228 5.52283 3.60095 5.28 3.60095 0 ]xsh124.202 308.272 mo
155.184 331.291 li
.239216 .4 .588235 rgb
25400 lw
gsave
[6.3205e-05 4.69589e-05 -4.69589e-05 6.3205e-05 124.257 308.198 ]ct
@
grestore newpath
155.28 316.608 mo
155.28 314.593 156.913 312.96 158.928 312.96 cv
230.112 312.96 li
232.127 312.96 233.76 314.593 233.76 316.608 cv
233.76 345.792 li
233.76 347.807 232.127 349.44 230.112 349.44 cv
158.928 349.44 li
156.913 349.44 155.28 347.807 155.28 345.792 cv
cp
1 .537255 .690196 rgb
f
1.92 lw
155.28 316.608 mo
155.28 314.593 156.913 312.96 158.928 312.96 cv
230.112 312.96 li
232.127 312.96 233.76 314.593 233.76 316.608 cv
233.76 345.792 li
233.76 347.807 232.127 349.44 230.112 349.44 cv
158.928 349.44 li
156.913 349.44 155.28 347.807 155.28 345.792 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf172.695 328.185 mo(".\)5\($%.?!)[5.03999 4.07999 2.64005 6.23993 6.23993 3.84007 5.76006 4.07999 5.52003 0 ]xsh178.695 341.146 mo(&%5#\(.)[2.64005 5.76004 6.23993 6.23991 6.23993 0 ]xsh2 lw
233.748 331.29 mo
255.873 331.29 li
1 .537255 .690196 rgb
@
334.32 319.24 mo
334.32 315.904 331.616 313.2 328.28 313.2 cv
261.88 313.2 li
258.544 313.2 255.84 315.904 255.84 319.24 cv
255.84 343.4 li
255.84 346.736 258.544 349.44 261.88 349.44 cv
328.28 349.44 li
331.616 349.44 334.32 346.736 334.32 343.4 cv
cp
1 .541176 .690196 rgb
f
1.92 lw
2 lj
334.32 319.24 mo
334.32 315.904 331.616 313.2 328.28 313.2 cv
261.88 313.2 li
258.544 313.2 255.84 315.904 255.84 319.24 cv
255.84 343.4 li
255.84 346.736 258.544 349.44 261.88 349.44 cv
328.28 349.44 li
331.616 349.44 334.32 346.736 334.32 343.4 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 1670 13 <000200acfffa03c7050e001c0029000001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g13 13 def
end
VSQHJM+Calibri /Encoding get
dup 78 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 177{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf281.531 334.805 mo(N#&\)$?)[5.99997 6.2399 2.64005 2.64005 4.08008 0 ]xsh334.437 331.317 mo
356.094 301.482 li
1 .537255 .690196 rgb
25400 lw
1 lj
gsave
[4.62555e-05 -6.37216e-05 6.37216e-05 4.62555e-05 334.362 331.262 ]ct
@
grestore newpath
356.28 297.336 mo
356.28 296.753 356.753 296.28 357.336 296.28 cv
573.384 296.28 li
573.967 296.28 574.44 296.753 574.44 297.336 cv
574.44 305.784 li
574.44 306.367 573.967 306.84 573.384 306.84 cv
357.336 306.84 li
356.753 306.84 356.28 306.367 356.28 305.784 cv
cp
f
1.2 lw
356.28 297.336 mo
356.28 296.753 356.753 296.28 357.336 296.28 cv
573.384 296.28 li
573.967 296.28 574.44 296.753 574.44 297.336 cv
574.44 305.784 li
574.44 306.367 573.967 306.84 573.384 306.84 cv
357.336 306.84 li
356.753 306.84 356.28 306.367 356.28 305.784 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 6826 48 <00030052ffed03ba0521002700370047000001140e0223222e0235343e02
372e0335343e0233321e0215140e02071e0303342e0223220615141e0217
363613342e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c
5c402131639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c
656c2a224567443f5f3d1f85848083014c54835a2e2a52784d3d66564b22
1f45515c36447758332f516e3f335e544920234a555f025f2a4430196255
27433c391f347efda22e4b413d211f3e42492c616a6b>VSQHJM+Calibri AddT42Char 
1 8120 57 <ffff0052ffed03ba0521020600300000>VSQHJM+Calibri AddT42Char 
1 1554 12 <00020063ffed04e8052100130027000001140e0223222e0235343e023332
1e0207342e0223220e0215141e0233323e0204e84a93de9492d58b444a94
de948fd48d45b5275b987070985f29265a9772719a5e2802969dfcb15f57
a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g57 57 def
/g12 12 def
end
VSQHJM+Calibri /Encoding get
dup 79 /g57 put
dup 80 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 175{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.713 304.353 mo(O2!!P5&\)0%$#.?!&%5#\(.6.B)[5.28003 2.88293 2.39709 2.39709 6.95908 5.5228 2.39719 2.39716 5.03705 5.03714 3.60104 5.5228 3.60095 4.80484 2.15421 2.39716 5.03717 5.52283 5.5228 5.52283 3.60092 5.28003 3.60092 0 ]xsh334.437 331.317 mo
356.094 316.814 li
1 .537255 .690196 rgb
25400 lw
gsave
[6.54254e-05 -4.38125e-05 4.38125e-05 6.54254e-05 334.386 331.24 ]ct
@
grestore newpath
356.28 312.696 mo
356.28 312.113 356.753 311.64 357.336 311.64 cv
573.384 311.64 li
573.967 311.64 574.44 312.113 574.44 312.696 cv
574.44 321.144 li
574.44 321.727 573.967 322.2 573.384 322.2 cv
357.336 322.2 li
356.753 322.2 356.28 321.727 356.28 321.144 cv
cp
f
1.2 lw
356.28 312.696 mo
356.28 312.113 356.753 311.64 357.336 311.64 cv
573.384 311.64 li
573.967 311.64 574.44 312.113 574.44 312.696 cv
574.44 321.144 li
574.44 321.727 573.967 322.2 573.384 322.2 cv
357.336 322.2 li
356.753 322.2 356.28 321.727 356.28 321.144 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 8136 58 <00020052ffed03a6052100300042000001140e0423222e0435343e023332
1e0233323e0237060623222e0235343e0233321e0407342e0223220e0215
141e0233323603a61430517ba9702b51412c140903060b080b283d523361
8b582c023594606c935927326aa472517d5c402711af2242603f415c3b1c
19385a424b8c02ba54ac9f8b683b0b1012121f1a161a0e050f120f4b7ea6
5c1f303b668c53569b7646294d6d8aa14680af6c302f4f64353b6244252d
>VSQHJM+Calibri AddT42Char 
1 894 7 <000100acfffa015805140015000025140e0223222e023511343e0233321e
02150158081421191822140809152117192114081a080c070505070c0804
da080c070505070c0800>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g58 58 def
/g7 7 def
end
VSQHJM+Calibri /Encoding get
dup 81 /g58 put
dup 82 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 173{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf368.713 319.685 mo(Q2!!R*86*$\(.68!$.\)5\($%.?!&%5#\(.6.B)[5.28003 2.88293 2.39709 2.39709 2.63998 5.52283 5.52283 5.28 5.5228 3.60104 5.52283 3.60095 5.28 5.52283 2.15421 3.60104 3.60095 2.39716 5.5228 5.52283 3.60104 5.03714 3.60095 4.80484 2.39709 2.39716 5.03717 5.52283 5.5228 5.52283 3.60095 5.28 3.60095 0 ]xsh334.437 331.317 mo
356.094 332.146 li
1 .537255 .690196 rgb
25400 lw
gsave
[7.86825e-05 3.01248e-06 -3.01248e-06 7.86825e-05 334.441 331.224 ]ct
@
grestore newpath
356.28 328.056 mo
356.28 327.473 356.753 327 357.336 327 cv
573.384 327 li
573.967 327 574.44 327.473 574.44 328.056 cv
574.44 336.504 li
574.44 337.087 573.967 337.56 573.384 337.56 cv
357.336 337.56 li
356.753 337.56 356.28 337.087 356.28 336.504 cv
cp
f
1.2 lw
356.28 328.056 mo
356.28 327.473 356.753 327 357.336 327 cv
573.384 327 li
573.967 327 574.44 327.473 574.44 328.056 cv
574.44 336.504 li
574.44 337.087 573.967 337.56 573.384 337.56 cv
357.336 337.56 li
356.753 337.56 356.28 337.087 356.28 336.504 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 7028 49 <00020048ffed03c705210013002b000001140e0223222e0235343e023332
1e0207342e0423220e0215141e0233323e0403c72f6db0817aa7662b306c
b0807ba7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95
f6b16157a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24
435e7285>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g49 49 def
end
VSQHJM+Calibri /Encoding get
dup 83 /g49 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 172{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf364.153 335.016 mo(1S2!!".\)5\($%.?!B6.;B)[5.28003 5.28003 2.88293 2.39709 2.39709 5.03714 3.60095 2.39716 5.5228 5.52283 3.60104 5.03714 3.60095 4.80484 2.39709 4.07623 5.28 3.60095 3.11511 0 ]xsh334.437 331.317 mo
356.094 347.478 li
1 .537255 .690196 rgb
25400 lw
gsave
[6.31062e-05 4.70916e-05 -4.70916e-05 6.31062e-05 334.493 331.243 ]ct
@
grestore newpath
356.28 343.416 mo
356.28 342.833 356.753 342.36 357.336 342.36 cv
573.384 342.36 li
573.967 342.36 574.44 342.833 574.44 343.416 cv
574.44 351.864 li
574.44 352.447 573.967 352.92 573.384 352.92 cv
357.336 352.92 li
356.753 352.92 356.28 352.447 356.28 351.864 cv
cp
f
1.2 lw
356.28 343.416 mo
356.28 342.833 356.753 342.36 357.336 342.36 cv
573.384 342.36 li
573.967 342.36 574.44 342.833 574.44 343.416 cv
574.44 351.864 li
574.44 352.447 573.967 352.92 573.384 352.92 cv
357.336 352.92 li
356.753 352.92 356.28 352.447 356.28 351.864 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf364.153 350.348 mo(112!!".\)5\($%.?!B&%L6B)[5.28003 5.28003 2.88293 2.39709 2.39709 5.03714 3.60095 2.39716 5.5228 5.52283 3.60104 5.03714 3.60095 4.80484 2.39709 4.07623 2.39716 5.03717 4.80475 5.28 0 ]xsh124.202 308.272 mo
154.827 457.362 li
.239216 .4 .588235 rgb
25400 lw
gsave
[1.58434e-05 7.71298e-05 -7.71298e-05 1.58434e-05 124.293 308.253 ]ct
@
grestore newpath
154.8 442.848 mo
154.8 440.833 156.433 439.2 158.448 439.2 cv
229.632 439.2 li
231.647 439.2 233.28 440.833 233.28 442.848 cv
233.28 472.032 li
233.28 474.047 231.647 475.68 229.632 475.68 cv
158.448 475.68 li
156.433 475.68 154.8 474.047 154.8 472.032 cv
cp
0 .721569 .533333 rgb
f
1.92 lw
154.8 442.848 mo
154.8 440.833 156.433 439.2 158.448 439.2 cv
229.632 439.2 li
231.647 439.2 233.28 440.833 233.28 442.848 cv
233.28 472.032 li
233.28 474.047 231.647 475.68 229.632 475.68 cv
158.448 475.68 li
156.433 475.68 154.8 474.047 154.8 472.032 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf161.295 454.252 mo(3#>>#8\);\)68!)[6.48006 6.2399 9.59996 9.59995 6.23991 6.23993 2.64005 3.59991 2.64006 6 6.23993 0 ]xsh178.335 467.212 mo(&%5#\(.)[2.64005 5.76004 6.23993 6.23991 6.23993 0 ]xsh233.391 457.357 mo
256.046 422.101 li
0 .721569 .533333 rgb
25400 lw
gsave
[4.25673e-05 -6.62422e-05 6.62422e-05 4.25673e-05 233.313 457.307 ]ct
@
grestore newpath
256.08 407.568 mo
256.08 405.553 257.713 403.92 259.728 403.92 cv
330.912 403.92 li
332.927 403.92 334.56 405.553 334.56 407.568 cv
334.56 436.752 li
334.56 438.767 332.927 440.4 330.912 440.4 cv
259.728 440.4 li
257.713 440.4 256.08 438.767 256.08 436.752 cv
cp
f
1.92 lw
256.08 407.568 mo
256.08 405.553 257.713 403.92 259.728 403.92 cv
330.912 403.92 li
332.927 403.92 334.56 405.553 334.56 407.568 cv
334.56 436.752 li
334.56 438.767 332.927 440.4 330.912 440.4 cv
259.728 440.4 li
257.713 440.4 256.08 438.767 256.08 436.752 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 1204 10 <000100acfffa062b050e003c000025140e0223222e02351123010e032322
2e0227012311140e0223222e02351134363333321e02170133013e033333
321e0215062b08141f191721130802fe33030b151d14151e140b02fe4701
08142019182013072c1b68203024180901770501860b1a1f26196d0f1b13
0c1a080c070505070c080467fb94070a070304070a06046cfb99080c0705
05070c0804a62a240c1a281bfc5703a61e2a190b09131d15>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g10 10 def
end
VSQHJM+Calibri /Encoding get
dup 84 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 /g10 171{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf277.636 425.591 mo(T%./6$)[10.3199 5.76004 4.07999 5.04001 6.00003 0 ]xsh334.61 422.103 mo
355.389 374.352 li
0 .721569 .533333 rgb
25400 lw
gsave
[3.14188e-05 -7.22002e-05 7.22002e-05 3.14188e-05 334.525 422.065 ]ct
@
grestore newpath
355.56 370.296 mo
355.56 369.713 356.033 369.24 356.616 369.24 cv
572.664 369.24 li
573.247 369.24 573.72 369.713 573.72 370.296 cv
573.72 378.744 li
573.72 379.327 573.247 379.8 572.664 379.8 cv
356.616 379.8 li
356.033 379.8 355.56 379.327 355.56 378.744 cv
cp
f
1.2 lw
355.56 370.296 mo
355.56 369.713 356.033 369.24 356.616 369.24 cv
572.664 369.24 li
573.247 369.24 573.72 369.713 573.72 370.296 cv
573.72 378.744 li
573.72 379.327 573.247 379.8 572.664 379.8 cv
356.616 379.8 li
356.033 379.8 355.56 379.327 355.56 378.744 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf358.648 377.224 mo(19%2!!K6&;)[5.28003 5.28003 5.03717 2.88293 2.39709 2.39709 4.80481 5.28 2.39716 0 ]xsh397.528 377.224 mo(,)sh400.648 377.224 mo(6>'&#?68!&6%8\)*0!'.#8\(46.B)[5.28 8.39514 5.52283 2.39716 5.5228 4.79428 5.28 5.52283 2.39709 2.39716 5.28003 5.03717 5.5228 2.39716 5.52283 5.03705 2.15421 5.52283 3.60095 5.5228 5.52283 5.52283 4.56195 5.28 3.60095 0 ]xsh334.61 422.103 mo
355.051 390.907 li
0 .721569 .533333 rgb
25400 lw
gsave
[4.31557e-05 -6.58604e-05 6.58604e-05 4.31557e-05 334.532 422.052 ]ct
@
grestore newpath
355.08 386.856 mo
355.08 386.273 355.553 385.8 356.136 385.8 cv
572.424 385.8 li
573.007 385.8 573.48 386.273 573.48 386.856 cv
573.48 395.304 li
573.48 395.887 573.007 396.36 572.424 396.36 cv
356.136 396.36 li
355.553 396.36 355.08 395.887 355.08 395.304 cv
cp
f
1.2 lw
355.08 386.856 mo
355.08 386.273 355.553 385.8 356.136 385.8 cv
572.424 385.8 li
573.007 385.8 573.48 386.273 573.48 386.856 cv
573.48 395.304 li
573.48 395.887 573.007 396.36 572.424 396.36 cv
356.136 396.36 li
355.553 396.36 355.08 395.887 355.08 395.304 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf358.31 393.779 mo(1952!K6&;)[5.28003 5.28003 5.52283 2.88293 2.39709 4.80481 5.28 2.39716 0 ]xsh395.27 393.779 mo(,)sh398.39 393.779 mo(6>'&#?68!/\)*!'.#8\(46.B)[5.28 8.39514 5.52283 2.39716 5.5228 4.79428 5.28 5.52283 2.39709 4.79425 2.39719 5.5228 2.39709 5.52283 3.60095 5.5228 5.52283 5.52283 4.56195 5.28 3.60095 0 ]xsh334.61 422.103 mo
355.389 406.879 li
0 .721569 .533333 rgb
25400 lw
gsave
[6.35172e-05 -4.65357e-05 4.65357e-05 6.35172e-05 334.555 422.028 ]ct
@
grestore newpath
355.56 402.696 mo
355.56 402.113 356.033 401.64 356.616 401.64 cv
572.664 401.64 li
573.247 401.64 573.72 402.113 573.72 402.696 cv
573.72 411.144 li
573.72 411.727 573.247 412.2 572.664 412.2 cv
356.616 412.2 li
356.033 412.2 355.56 411.727 355.56 411.144 cv
cp
f
1.2 lw
355.56 402.696 mo
355.56 402.113 356.033 401.64 356.616 401.64 cv
572.664 401.64 li
573.247 401.64 573.72 402.113 573.72 402.696 cv
573.72 411.144 li
573.72 411.727 573.247 412.2 572.664 412.2 cv
356.616 412.2 li
356.033 412.2 355.56 411.727 355.56 411.144 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 510 4 <000100ac0000037c050e002c000025140e0223212226351134363321321e
0215140e0223211121321e0215140e0223211121321e02037c040a0d08fd
93172929170266080d080505080d08fe0601b2080d090404090d08fe4e02
01080d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13
121a1007fe3108111b00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g4 4 def
end
VSQHJM+Calibri /Encoding get
dup 85 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 /g10 /g4 170{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.448 409.75 mo(1<2!!U>'&#?6.B)[5.28003 5.28003 2.88293 2.39709 2.39709 5.0372 8.40573 5.5228 2.39716 5.52283 4.80481 5.28003 3.60092 0 ]xsh573.648 406.879 mo
607.051 303.463 li
0 .721569 .533333 rgb
25400 lw
gsave
[2.42017e-05 -7.49285e-05 7.49285e-05 2.42017e-05 573.56 406.851 ]ct
@
grestore newpath
607.08 299.256 mo
607.08 298.673 607.553 298.2 608.136 298.2 cv
781.944 298.2 li
782.527 298.2 783 298.673 783 299.256 cv
783 307.704 li
783 308.287 782.527 308.76 781.944 308.76 cv
608.136 308.76 li
607.553 308.76 607.08 308.287 607.08 307.704 cv
cp
f
1.2 lw
607.08 299.256 mo
607.08 298.673 607.553 298.2 608.136 298.2 cv
781.944 298.2 li
782.527 298.2 783 298.673 783 299.256 cv
783 307.704 li
783 308.287 782.527 308.76 781.944 308.76 cv
608.136 308.76 li
607.553 308.76 607.08 308.287 607.08 307.704 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 6310 43 <00010097fff7016e00e0000b0000251406232226353436333216016e2f3e
3c2e2f3e3c2e6d472f2e45472f2e>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g43 43 def
end
VSQHJM+Calibri /Encoding get
dup 86 /g43 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 /g10 /g4 /g43 169{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.71 306.337 mo(1<V12!!P;!;.66!-%06!6%.*6.B)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 6.95905 3.11511 2.39709 3.11511 3.60095 5.28003 5.28003 2.39709 7.4342 5.03717 5.03705 5.27997 2.39709 5.28003 5.03717 3.60095 5.52283 5.27997 3.60095 0 ]xsh573.648 406.879 mo
607.051 317.601 li
0 .721569 .533333 rgb
25400 lw
gsave
[2.75924e-05 -7.37474e-05 7.37474e-05 2.75924e-05 573.561 406.847 ]ct
@
grestore newpath
783 313.416 mo
783 312.833 782.527 312.36 781.944 312.36 cv
608.136 312.36 li
607.553 312.36 607.08 312.833 607.08 313.416 cv
607.08 321.864 li
607.08 322.447 607.553 322.92 608.136 322.92 cv
781.944 322.92 li
782.527 322.92 783 322.447 783 321.864 cv
cp
f
1.2 lw
783 313.416 mo
783 312.833 782.527 312.36 781.944 312.36 cv
608.136 312.36 li
607.553 312.36 607.08 312.833 607.08 313.416 cv
607.08 321.864 li
607.08 322.447 607.553 322.92 608.136 322.92 cv
781.944 322.92 li
782.527 322.92 783 322.447 783 321.864 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.711 320.475 mo(1<V92!!P;!\)86*$\(.68!&%5#\(.6.B)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 6.95905 3.11511 2.39709 2.39716 5.52283 5.28003 5.52283 3.60101 5.52283 3.60095 5.27997 5.52283 2.15424 2.39716 5.03717 5.52283 5.52277 5.52283 3.60095 5.28003 3.60095 0 ]xsh573.648 406.879 mo
607.051 332.04 li
0 .721569 .533333 rgb
25400 lw
gsave
[3.20926e-05 -7.19033e-05 7.19033e-05 3.20926e-05 573.563 406.842 ]ct
@
grestore newpath
607.08 327.84 mo
607.08 327.244 607.564 326.76 608.16 326.76 cv
781.92 326.76 li
782.516 326.76 783 327.244 783 327.84 cv
783 336.48 li
783 337.076 782.516 337.56 781.92 337.56 cv
608.16 337.56 li
607.564 337.56 607.08 337.076 607.08 336.48 cv
cp
f
1.2 lw
607.08 327.84 mo
607.08 327.244 607.564 326.76 608.16 326.76 cv
781.92 326.76 li
782.516 326.76 783 327.244 783 327.84 cv
783 336.48 li
783 337.076 782.516 337.56 781.92 337.56 cv
608.16 337.56 li
607.564 337.56 607.08 337.076 607.08 336.48 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.711 334.913 mo(1<V<2!!P;!B6.;B)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 6.95905 3.11511 2.39709 4.07623 5.28003 3.60095 3.11511 0 ]xsh573.648 406.879 mo
607.051 346.496 li
0 .721569 .533333 rgb
25400 lw
gsave
[3.81146e-05 -6.89006e-05 6.89006e-05 3.81146e-05 573.567 406.835 ]ct
@
grestore newpath
607.08 342.456 mo
607.08 341.873 607.553 341.4 608.136 341.4 cv
781.944 341.4 li
782.527 341.4 783 341.873 783 342.456 cv
783 350.904 li
783 351.487 782.527 351.96 781.944 351.96 cv
608.136 351.96 li
607.553 351.96 607.08 351.487 607.08 350.904 cv
cp
f
1.2 lw
607.08 342.456 mo
607.08 341.873 607.553 341.4 608.136 341.4 cv
781.944 341.4 li
782.527 341.4 783 341.873 783 342.456 cv
783 350.904 li
783 351.487 782.527 351.96 781.944 351.96 cv
608.136 351.96 li
607.553 351.96 607.08 351.487 607.08 350.904 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.711 349.368 mo(1<VF2!!P;!B&%L6B)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 6.95905 3.11511 2.39709 4.07623 2.39716 5.03717 4.80475 5.28003 0 ]xsh334.61 422.103 mo
355.389 424.012 li
0 .721569 .533333 rgb
25400 lw
gsave
[7.84097e-05 7.20645e-06 -7.20645e-06 7.84097e-05 334.618 422.01 ]ct
@
grestore newpath
355.56 419.976 mo
355.56 419.393 356.033 418.92 356.616 418.92 cv
572.664 418.92 li
573.247 418.92 573.72 419.393 573.72 419.976 cv
573.72 428.424 li
573.72 429.007 573.247 429.48 572.664 429.48 cv
356.616 429.48 li
356.033 429.48 355.56 429.007 355.56 428.424 cv
cp
f
1.2 lw
355.56 419.976 mo
355.56 419.393 356.033 418.92 356.616 418.92 cv
572.664 418.92 li
573.247 418.92 573.72 419.393 573.72 419.976 cv
573.72 428.424 li
573.72 429.007 573.247 429.48 572.664 429.48 cv
356.616 429.48 li
356.033 429.48 355.56 429.007 355.56 428.424 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 2408 18 <0001003dfffa06e00514003c0000250e0323222e02270123030e0323222e
0227012626363633321e02170133013e0333321e02170133013e03333216
160607058304101c291e1f2b1c0e04fef102fa030e1a2920212c1c0f03fe
aa06011126201f241307020123010114030914251e1c2114090301290201
1d030613231d1e23100105260e1109040409110e03d1fc2f0e1109040409
110e04ab171a0e0403080e0bfbc4043a0b0f080404080f0bfbc6043b0a0f
0804050e1a17>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g18 18 def
end
VSQHJM+Calibri /Encoding get
dup 87 /g18 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 /g10 /g4 /g43 /g18 168{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.448 426.883 mo(1F2!!W%06!6%.*6.B)[5.28003 5.28003 2.88293 2.39709 2.39709 9.35617 5.03717 5.03705 5.28 2.15421 5.28003 5.03714 3.60095 5.52283 5.28003 3.60092 0 ]xsh573.648 424.012 mo
607.051 370.872 li
0 .721569 .533333 rgb
25400 lw
gsave
[4.19041e-05 -6.66638e-05 6.66638e-05 4.19041e-05 573.57 423.963 ]ct
@
grestore newpath
607.08 366.696 mo
607.08 366.113 607.553 365.64 608.136 365.64 cv
781.944 365.64 li
782.527 365.64 783 366.113 783 366.696 cv
783 375.144 li
783 375.727 782.527 376.2 781.944 376.2 cv
608.136 376.2 li
607.553 376.2 607.08 375.727 607.08 375.144 cv
cp
f
1.2 lw
607.08 366.696 mo
607.08 366.113 607.553 365.64 608.136 365.64 cv
781.944 365.64 li
782.527 365.64 783 366.113 783 366.696 cv
783 375.144 li
783 375.727 782.527 376.2 781.944 376.2 cv
608.136 376.2 li
607.553 376.2 607.08 375.727 607.08 375.144 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.712 373.744 mo(1FV12!!KC%.64.#''\)*0)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 4.80475 5.52283 5.03717 3.60095 5.28003 4.56195 3.60095 5.52283 5.52277 5.52283 2.39716 5.52283 0 ]xsh573.648 424.012 mo
607.051 385.688 li
0 .721569 .533333 rgb
25400 lw
gsave
[5.1736e-05 -5.93582e-05 5.93582e-05 5.1736e-05 573.578 423.951 ]ct
@
grestore newpath
607.08 381.576 mo
607.08 380.993 607.553 380.52 608.136 380.52 cv
781.944 380.52 li
782.527 380.52 783 380.993 783 381.576 cv
783 390.024 li
783 390.607 782.527 391.08 781.944 391.08 cv
608.136 391.08 li
607.553 391.08 607.08 390.607 607.08 390.024 cv
cp
f
1.2 lw
607.08 381.576 mo
607.08 380.993 607.553 380.52 608.136 380.52 cv
781.944 380.52 li
782.527 380.52 783 380.993 783 381.576 cv
783 390.024 li
783 390.607 782.527 391.08 781.944 391.08 cv
608.136 391.08 li
607.553 391.08 607.08 390.607 607.08 390.024 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.712 388.559 mo(1FV92!!N\)646!.%$6)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 5.52283 2.39716 5.28003 4.56195 5.28003 1.92188 3.60095 5.03717 3.60101 0 ]xsh573.648 424.012 mo
607.051 400.194 li
0 .721569 .533333 rgb
25400 lw
gsave
[6.41108e-05 -4.57146e-05 4.57146e-05 6.41108e-05 573.594 423.937 ]ct
@
grestore newpath
607.08 396 mo
607.08 395.404 607.564 394.92 608.16 394.92 cv
781.92 394.92 li
782.516 394.92 783 395.404 783 396 cv
783 404.64 li
783 405.236 782.516 405.72 781.92 405.72 cv
608.16 405.72 li
607.564 405.72 607.08 405.236 607.08 404.64 cv
cp
f
1.2 lw
607.08 396 mo
607.08 395.404 607.564 394.92 608.16 394.92 cv
781.92 394.92 li
782.516 394.92 783 395.404 783 396 cv
783 404.64 li
783 405.236 782.516 405.72 781.92 405.72 cv
608.16 405.72 li
607.564 405.72 607.08 405.236 607.08 404.64 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.713 403.065 mo(1FV<2!!"\)>6!.%$6)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 5.03711 2.39716 8.4057 5.28003 2.39709 3.60095 5.03717 3.60101 0 ]xsh573.648 424.012 mo
607.051 414.903 li
0 .721569 .533333 rgb
25400 lw
gsave
[7.59661e-05 -2.07161e-05 2.07161e-05 7.59661e-05 573.624 423.923 ]ct
@
grestore newpath
607.08 410.856 mo
607.08 410.273 607.553 409.8 608.136 409.8 cv
781.944 409.8 li
782.527 409.8 783 410.273 783 410.856 cv
783 419.304 li
783 419.887 782.527 420.36 781.944 420.36 cv
608.136 420.36 li
607.553 420.36 607.08 419.887 607.08 419.304 cv
cp
f
1.2 lw
607.08 410.856 mo
607.08 410.273 607.553 409.8 608.136 409.8 cv
781.944 409.8 li
782.527 409.8 783 410.273 783 410.856 cv
783 419.304 li
783 419.887 782.527 420.36 781.944 420.36 cv
608.136 420.36 li
607.553 420.36 607.08 419.887 607.08 419.304 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.713 417.774 mo(1FVF2!!3##'6.%$\)L6!B\(54#*$.%4$\)*0)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 5.52289 5.52283 5.52283 5.52277 5.28003 3.60095 5.03717 3.60101 2.39716 4.80475 5.28003 2.15424 4.07623 5.52283 5.52277 4.56201 5.52277 5.52283 3.60101 3.60095 5.03717 4.56195 3.60107 2.39716 5.52277 0 ]xsh334.61 422.103 mo
355.389 439.829 li
0 .721569 .533333 rgb
25400 lw
gsave
[5.99032e-05 5.1104e-05 -5.1104e-05 5.99032e-05 334.67 422.032 ]ct
@
grestore newpath
355.56 435.816 mo
355.56 435.233 356.033 434.76 356.616 434.76 cv
572.664 434.76 li
573.247 434.76 573.72 435.233 573.72 435.816 cv
573.72 444.264 li
573.72 444.847 573.247 445.32 572.664 445.32 cv
356.616 445.32 li
356.033 445.32 355.56 444.847 355.56 444.264 cv
cp
f
1.2 lw
355.56 435.816 mo
355.56 435.233 356.033 434.76 356.616 434.76 cv
572.664 434.76 li
573.247 434.76 573.72 435.233 573.72 435.816 cv
573.72 444.264 li
573.72 444.847 573.247 445.32 572.664 445.32 cv
356.616 445.32 li
356.033 445.32 355.56 444.847 355.56 444.264 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.448 442.699 mo(1I2!!R*86*$\(.68!&%5#\(.6.B)[5.28003 5.28003 2.88293 2.39709 2.39709 2.64001 5.5228 5.52283 5.28 5.52283 3.60101 5.52283 3.60095 5.28 5.52283 2.15424 2.39716 5.03717 5.5228 5.52283 5.5228 3.60095 5.28 3.60095 0 ]xsh334.61 422.103 mo
355.389 456.013 li
0 .721569 .533333 rgb
25400 lw
gsave
[4.11397e-05 6.71382e-05 -6.71382e-05 4.11397e-05 334.689 422.054 ]ct
@
grestore newpath
355.56 451.896 mo
355.56 451.313 356.033 450.84 356.616 450.84 cv
572.664 450.84 li
573.247 450.84 573.72 451.313 573.72 451.896 cv
573.72 460.344 li
573.72 460.927 573.247 461.4 572.664 461.4 cv
356.616 461.4 li
356.033 461.4 355.56 460.927 355.56 460.344 cv
cp
f
1.2 lw
355.56 451.896 mo
355.56 451.313 356.033 450.84 356.616 450.84 cv
572.664 450.84 li
573.247 450.84 573.72 451.313 573.72 451.896 cv
573.72 460.344 li
573.72 460.927 573.247 461.4 572.664 461.4 cv
356.616 461.4 li
356.033 461.4 355.56 460.927 355.56 460.344 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.448 458.882 mo(1J2!!K6.;B)[5.28003 5.28003 2.88293 2.39709 2.39709 4.80481 5.28 3.60095 3.11514 0 ]xsh334.61 422.103 mo
355.389 470.467 li
0 .721569 .533333 rgb
25400 lw
gsave
[3.10821e-05 7.23458e-05 -7.23458e-05 3.10821e-05 334.695 422.066 ]ct
@
grestore newpath
355.56 466.296 mo
355.56 465.713 356.033 465.24 356.616 465.24 cv
572.664 465.24 li
573.247 465.24 573.72 465.713 573.72 466.296 cv
573.72 474.744 li
573.72 475.327 573.247 475.8 572.664 475.8 cv
356.616 475.8 li
356.033 475.8 355.56 475.327 355.56 474.744 cv
cp
f
1.2 lw
355.56 466.296 mo
355.56 465.713 356.033 465.24 356.616 465.24 cv
572.664 465.24 li
573.247 465.24 573.72 465.713 573.72 466.296 cv
573.72 474.744 li
573.72 475.327 573.247 475.8 572.664 475.8 cv
356.616 475.8 li
356.033 475.8 355.56 475.327 355.56 474.744 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.448 473.336 mo(1M2!!K&%L6B)[5.28003 5.28003 2.88293 2.39709 2.39709 4.80481 2.39716 5.03717 4.80475 5.28003 0 ]xsh573.648 470.465 mo
607.051 438.906 li
0 .721569 .533333 rgb
25400 lw
gsave
[5.7235e-05 -5.40756e-05 5.40756e-05 5.7235e-05 573.584 470.398 ]ct
@
grestore newpath
607.08 434.64 mo
607.08 434.044 607.564 433.56 608.16 433.56 cv
781.92 433.56 li
782.516 433.56 783 434.044 783 434.64 cv
783 443.28 li
783 443.876 782.516 444.36 781.92 444.36 cv
608.16 444.36 li
607.564 444.36 607.08 443.876 607.08 443.28 cv
cp
f
1.2 lw
607.08 434.64 mo
607.08 434.044 607.564 433.56 608.16 433.56 cv
781.92 433.56 li
782.516 433.56 783 434.044 783 434.64 cv
783 443.28 li
783 443.876 782.516 444.36 781.92 444.36 cv
608.16 444.36 li
607.564 444.36 607.08 443.876 607.08 443.28 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.714 441.777 mo(1MV12!!W#./\)*0!;#.!'.#'.\)6$#.)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 9.35614 5.52283 3.60095 4.80481 2.39716 5.52283 5.03705 2.15417 3.11517 5.52277 3.60095 2.64001 5.52277 3.60095 5.52283 5.52283 3.60095 2.39716 5.27997 3.60107 5.52277 0 ]xsh573.648 470.465 mo
607.051 453.982 li
0 .721569 .533333 rgb
25400 lw
gsave
[7.06109e-05 -3.48441e-05 3.48441e-05 7.06109e-05 573.607 470.382 ]ct
@
grestore newpath
607.08 449.76 mo
607.08 449.164 607.564 448.68 608.16 448.68 cv
781.92 448.68 li
782.516 448.68 783 449.164 783 449.76 cv
783 458.4 li
783 458.996 782.516 459.48 781.92 459.48 cv
608.16 459.48 li
607.564 459.48 607.08 458.996 607.08 458.4 cv
cp
f
1.2 lw
607.08 449.76 mo
607.08 449.164 607.564 448.68 608.16 448.68 cv
781.92 448.68 li
782.516 448.68 783 449.164 783 449.76 cv
783 458.4 li
783 458.996 782.516 459.48 781.92 459.48 cv
608.16 459.48 li
607.564 459.48 607.08 458.996 607.08 458.4 cv
cp
1 1 1 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: ZMPBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJM+Calibri gcheck setglobal} if
1 640 5 <000100acfffa0354050e0027000001140e0223211121321e0215140e0223
2111140e0223222e02351134363321321e020354040a0d07fe2601c0070d
0a04040a0d07fe400814201a1822140829170246070d0a0404c4131c1108
fe4807101b15131b1109fde5070d070505070d0704ae271f08121d00>VSQHJM+Calibri AddT42Char 
VSQHJM+Calibri /CharStrings get begin
/g5 5 def
end
VSQHJM+Calibri /Encoding get
dup 88 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJM+Calibri*1 [33{/.notdef}rp /g1 /g16 /g32 /g36 /g19 /g29 /g33 /g37 /g27 /g31 /g11 /g44 /g39 /g34 /g28 /g25 /g50 /g42 /g3 /g21 /g20 /g23 /g40 /g22 /g51 /g2 /g24 /g52 /g17 /g30 /g41 /g14 /g6 /g35 /g26 /g45 /g46 /g53 /g9 /g8 /g54 /g55 /g15 /g38 /g56 /g13 /g57 /g12 /g58 /g7 /g49 /g10 /g4 /g43 /g18 /g5 167{/.notdef}rp]VSQHJM+Calibri nfVSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.714 456.853 mo(1MV92!!X#.!C\).6)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 4.80475 5.52283 3.60095 2.39709 5.52283 2.39716 3.60095 0 ]xsh233.391 457.357 mo
256.54 490.987 li
0 .721569 .533333 rgb
25400 lw
gsave
[4.46455e-05 6.48598e-05 -6.48598e-05 4.46455e-05 233.467 457.304 ]ct
@
grestore newpath
256.56 476.448 mo
256.56 474.433 258.193 472.8 260.208 472.8 cv
331.392 472.8 li
333.407 472.8 335.04 474.433 335.04 476.448 cv
335.04 505.632 li
335.04 507.647 333.407 509.28 331.392 509.28 cv
260.208 509.28 li
258.193 509.28 256.56 507.647 256.56 505.632 cv
cp
f
1.92 lw
256.56 476.448 mo
256.56 474.433 258.193 472.8 260.208 472.8 cv
331.392 472.8 li
333.407 472.8 335.04 474.433 335.04 476.448 cv
335.04 505.632 li
335.04 507.647 333.407 509.28 331.392 509.28 cv
260.208 509.28 li
258.193 509.28 256.56 507.647 256.56 505.632 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [12 0 0 -12 0 0 ]msf266.61 487.882 mo(+#*)[7.67993 6.23993 0 ]xsh286.77 487.882 mo(,)sh290.37 487.882 mo(>%./6$!)[9.59995 5.76004 4.07999 5.04001 6.00003 4.08008 0 ]xsh268.53 500.842 mo(\)*B$\)$\($\)#*B)[2.64005 6.2399 4.56009 4.08008 2.64005 4.08008 6.23993 4.08008 2.64005 6.23993 6.23993 0 ]xsh2 lw
335.104 490.986 mo
355.237 490.986 li
0 .721569 .533333 rgb
@
355.32 486.936 mo
355.32 486.353 355.793 485.88 356.376 485.88 cv
572.664 485.88 li
573.247 485.88 573.72 486.353 573.72 486.936 cv
573.72 495.384 li
573.72 495.967 573.247 496.44 572.664 496.44 cv
356.376 496.44 li
355.793 496.44 355.32 495.967 355.32 495.384 cv
cp
f
1.2 lw
355.32 486.936 mo
355.32 486.353 355.793 485.88 356.376 485.88 cv
572.664 485.88 li
573.247 485.88 573.72 486.353 573.72 486.936 cv
573.72 495.384 li
573.72 495.967 573.247 496.44 572.664 496.44 cv
356.376 496.44 li
355.793 496.44 355.32 495.967 355.32 495.384 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf363.296 493.829 mo(1O2!!W%06!6%.*6.B)[5.28003 5.28003 2.88293 2.39709 2.39709 9.35617 5.03717 5.03705 5.28 2.15421 5.28003 5.03714 3.60095 5.52283 5.28003 3.60092 0 ]xsh573.496 490.959 mo
607.051 476.608 li
0 .721569 .533333 rgb
25400 lw
gsave
[7.23972e-05 -3.09623e-05 3.09623e-05 7.23972e-05 573.459 490.874 ]ct
@
grestore newpath
607.08 472.32 mo
607.08 471.724 607.564 471.24 608.16 471.24 cv
781.92 471.24 li
782.516 471.24 783 471.724 783 472.32 cv
783 480.96 li
783 481.556 782.516 482.04 781.92 482.04 cv
608.16 482.04 li
607.564 482.04 607.08 481.556 607.08 480.96 cv
cp
f
1.2 lw
607.08 472.32 mo
607.08 471.724 607.564 471.24 608.16 471.24 cv
781.92 471.24 li
782.516 471.24 783 471.724 783 472.32 cv
783 480.96 li
783 481.556 782.516 482.04 781.92 482.04 cv
608.16 482.04 li
607.564 482.04 607.08 481.556 607.08 480.96 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.715 479.479 mo(1OV12!!KC%.64.#''\)*0)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 4.80475 5.52283 5.03717 3.60095 5.28003 4.56195 3.60095 5.52283 5.52277 5.52283 2.39716 5.52283 0 ]xsh2 lw
573.496 490.959 mo
607.051 490.959 li
0 .721569 .533333 rgb
@
607.08 486.72 mo
607.08 486.124 607.564 485.64 608.16 485.64 cv
781.92 485.64 li
782.516 485.64 783 486.124 783 486.72 cv
783 495.36 li
783 495.956 782.516 496.44 781.92 496.44 cv
608.16 496.44 li
607.564 496.44 607.08 495.956 607.08 495.36 cv
cp
f
1.2 lw
607.08 486.72 mo
607.08 486.124 607.564 485.64 608.16 485.64 cv
781.92 485.64 li
782.516 485.64 783 486.124 783 486.72 cv
783 495.36 li
783 495.956 782.516 496.44 781.92 496.44 cv
608.16 496.44 li
607.564 496.44 607.08 495.956 607.08 495.36 cv
cp
1 1 1 rgb
@
1 1 1 rgb
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.715 493.817 mo(1OV92!!N\)646!.%$6)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 5.52283 2.39716 5.28003 4.56195 5.28003 1.92188 3.60095 5.03717 3.60101 0 ]xsh573.496 490.959 mo
607.051 505.38 li
0 .721569 .533333 rgb
25400 lw
gsave
[7.23421e-05 3.10906e-05 -3.10906e-05 7.23421e-05 573.533 490.874 ]ct
@
grestore newpath
607.08 501.12 mo
607.08 500.524 607.564 500.04 608.16 500.04 cv
781.92 500.04 li
782.516 500.04 783 500.524 783 501.12 cv
783 509.76 li
783 510.356 782.516 510.84 781.92 510.84 cv
608.16 510.84 li
607.564 510.84 607.08 510.356 607.08 509.76 cv
cp
f
1.2 lw
607.08 501.12 mo
607.08 500.524 607.564 500.04 608.16 500.04 cv
781.92 500.04 li
782.516 500.04 783 500.524 783 501.12 cv
783 509.76 li
783 510.356 782.516 510.84 781.92 510.84 cv
608.16 510.84 li
607.564 510.84 607.08 510.356 607.08 509.76 cv
cp
1 1 1 rgb
@
VSQHJM+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf612.716 508.25 mo(1OV<2!!"\)>6!.%$6)[5.28003 5.28003 2.63995 5.28009 2.88293 2.39709 2.39709 5.03711 2.39716 8.4057 5.28003 2.39709 3.60095 5.03717 3.60101 0 ]xshgrestore
gsave
415.2 554.4 mo
801 554.4 li
801 526.08 li
415.2 526.08 li
415.2 554.4 li
clp
662.88 554.4 mo
799.92 554.4 li
799.92 526.08 li
662.88 526.08 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[137.04 0 0 28.32 662.88 40.6 ]ct
snap_to_device
<<
/T 1
/W 438 
/H 90 
/M[438 0 0 -90 0 90 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 1
img
s4IA0!"_al8O`[\!<E2U!8IPSs4[N@!!30%!<E3&!<E3&!WiE)"9S],!WiN."9Sc2"U5/8"U5/8#71Y?
#71V>"pbSB#mq"H$46tC$OdCM$jd7J$NJi\6NI5i!WiE)"Tni1$3pb?$47+I$47+I$47+I$47+I$47+I
$47+I$47+I$47+I$47+I$47+I$47+I$47+I$4?gK!"fJ:=ol&6!?qLF&HMtG!WU(<*rl9A"T\W)!<E3$
z!!!!"!WrQ/"pYD?$4HmP!4<@<!W`B*!X&T/"U"r.!!.KK!WrE*&Hrdj0gQ!W;.0\RE>10ZOeE%*6F"?
A;UOtZ1LbBV#mqFa(`=5<-7:2j.Ps"@2`NfY6UX@47n?3D;cHat='/U/@q9._B4u!oF*)PJGBeCZK7nr
5LPUeEP*;,qQC!u,R\HRQV5C/hWN*81['d?O\@K2f_o0O6a2lBFdaQ^rf%8R-g>V&OjQ5OekiqC&o(2M
Hp@n@XqZ"J6*ru?D!<E3%!<E3%!<<*"!!!!"!WrQ/"pYD?$4HmP!4<C=!W`?*"9Sc3"U"r.!<RHF!<N?
8"9fr'"qj4!#@VTc+u4]T'LIqUZ,$_k1K*]W@WKj'(*k`q-1Mcg)&ahL-n-W'2E*TU3^Z;(7Rp!@8lJ\
h<``C+>%;)SAnPdkC3+K>G'A1VH@gd&KnbA=M2II[Pa.Q$R$jD;USO``Vl6SpZEppG[^WcW]#)A'`Q#s
>ai`&\eCE.%f\,!<j5f=akNM0qo(2MHp@n@XqZ#7L$j-M1!YGMH!'^J^r3+G]paYb1S3Dl2!+K6Krfu<
kkTt\+rrBl:J)oS\?i(K'rrD\om_4a9J)kFZ)>!c#rr=7@lAq=uF5`bhP`H@T!8)>@rr>P@I51a%"Le)
BnF,?MpuqMM^fiA$p+`FmPP\i_MW`+=p:]3C`B/.KF,mk&V1!Q'q`F]UZFQ"dcer_oiL1Vd__b[;[8oa
%+b:6d&:<$Wk+"q3#Df@6FPCM5pK^[HWUlNr&(\`tL*]P>hU[)q^I,7H.&)Ush#.X0U5Aq!U5As?^\B5
?r0h64rr?D,5Pe@pIVIF#Q\dgXiL_!%&ni=>nEl7:@l#R"b>P]=iGth=P]0U[J4CRk>gN=(GO4eu!(7X
>J+u[jJ+:,HI$[$nQ/Q:H:ia4<dJ5*b+#TR!FgF2.Wu7aEQG0L#VrXCtS:A@<5NL/g+o_O^&,eImfB8d
HSMs?l^,bu;8CB%4[C!@3Au,s=Xh6qEL,HQ)<>@t)VuQf&!"/Z5rr@XsJ'">X6iQ'eqJa!KDi1QA9W"?
3=XWs`7ubCTp3EK*5*9XKP!,Os.'Lrm^'Z>192a72I6N'd=20L@f%(V*lK[M/*,rom/F:W3WW4<.^]LJ
0:WD6"n`HA<a+:m/V<_0%b[H\#8\^;F237f1(6++Y""D62Jj!kZA]r>84-Ro1DHlGZe=qgM8dZu@J-m^
!J-m^!J-m^!J-m^!J-mb8:K,_a>rL_Feo_6M/F=TpY-+q)&]Y;p2`&'#!E9%j,iA]&r$gZ5#C,]3D.CB
\/CQJG1ml5U>#"p=&ZgKa:pab`fO[%fE(@$3/@g&.VfI'Xc-(N^)K\hF8O5cZ:]X!!:]X!]eiZskNt09
I(Pk1D@:Ij?8S_eEQ\c<aSW4I2gd_#cJ>4C`'n2^MCQ"TD&5cSZ/+L*$49qe)X*E[Dg0T\Q/A`7,[;5R
)j*:n]&2]=H@MOnaiCWBNp78/HqSo.GX(aN>h-/W$ZWc0harWR<@?ktDONKil&]"[D/@g&.TXgiBbC)s
\U5G+cMC>,!MCTK5plY(;`',EWn:-5kH_TD4efi<3QY3<c/^;#L#i"B?/=Taq3<KD7H)cg7/$u`2at^2
?F)$R\W@00hM?#'!M?#'!M?#0un,<[+rr=DWUAk5GQZ)m(V0@(Y$"'<Sn5\BA3.2VB`4LNt/%`![iEuC
"01L?h!#'k'WVWBrrr@X<IK';'?VMpJ!,jCT)YgrD#n?Y.+al2>rOf>@CS-F_!9A9(rn[SSdUI(2hsr.
moD\g=Qr-9eiZ?HD72,`!72,`!72,du,Psq0!6N(PoDZcn;uZhijfd$Lpa<!;RK!8?5OK]p!2g3nr;$;
crrD-<r-A;BA"K\"!2X_fkVrDQe,E&@!5]iP&H;aZL!>&?&q@u_O0!j'R3)gS^[aFfkqDua*mmCj=2:G
MGu*h$i\,qQ0>Ljd9).FnW^W[u'1H[TBX-^b>D6uZ22mVo>;28-_L/j@O:MHj&Dqr\rr<Q.#l(accbgW
J<GS>FW3Ya@^+/^7\0#@7,T@u9b3W,uS;#fm2KBOPlef(Zcg9oVglM8pF[,gNP.YH,#t?`J4DR3Cq40-
&oTIY9lp!/s%7b\H:,c8%hoaY92q7?_o7(XV<`a6`G1BgBqeNWpNg'JC"[W*T[2[lD>KH_2@3)J_P!a5
5V(3kH.03n:73f$Ll3r4X!V8(:"5!Ou+1@NQ:YJmgGMWu%<hHKrl4u9%m(oc+`h%96_D<E*,_P2j9SP#
lnUPT5IVf#aJoZ7r[P*SlF8l4Q4\PeT:);B:q`*6\khkl.CQ0Q.ZAR)UgVr"nK&5)00cY1$O^<`1<PSq
A!!"],4Y+t!AGL9>o]`>(64.G`lYG5*?+[k6k>9F0#,kLj9hoR8>2=%Bh>U(0H6:2"paIhhV#4WKr"\_
a8^o;5I1O7h+,_a`Z\D,T7QBQ[/\S_M.]CDp%SF>K>^9aLJ"_6#qb?uDnX%(mO,it@?>)A'UWU&$CTsm
\8$R[Ef\-!7@KNQmbX_^H5d-5t55tW*;6596F7A)dMR'D^rX.hlC=`5'J\3]PisQg<]DJXeIA7<0.fr3
9`cA+BUP"W"SFM3>=b=Rb#D]2e=&LMC=4YsbCMdEjp?XhcN\_1c?$XV]6<pKo9A[ed0'f]^e$S$--o]"
$ehfH1(\efdSeeR#(HPm;ia!9NXCb2#KRuK?',fUJcCh35MTf(@_k?t$rr?lMKDtqXDR4-;Y8a@@H)]W
SXif:12Bg`rAp"`POc_>$2I$G<OnWg9?4Z$KfsCCQrMBJnp_Uiscg]N;6dp.(.uaVi)6_K\>FSVl8Qhg
2a\AU`J.!dl.nfjK'B,Kd_4Ru>_uB]ApkJ&qNC-:fFLsX#Lg?DoROpGZ*L2un6"!5/!^YlSkDio7:Dlc
nGA^/2MO!S^hVWYW;7s0eUbJ'K2.Vl7AE3Eb?g`Dr4Te%N!.p8Z!qA4.4?MJ\$Vg.+`TN&[/RXR$`Xs5
]e'$jSF"s/_b-QA?^^Z6g"[k8@n5E]IMXSOI_d@62U9bg=!9/JdQaY?ML%DctT?]?Gj^bV9A"(dCOa[u
A2">MNrUBR%*[^A/Q[PrL\lsN7;n958T&7`%P">;W)&lhH*e`.,&3o.BfZ3Lmr@h4!_<!PT=/Qm.pMcV
sQEDm<SU,JER-N\;=u<2&c9Jt+=2OZol`]4'UK\e[n=T[e"n32brrBu^IMlg3=0]ELBbO:TeL`#+hXX)
t+u#.H1Q8Vp<6dDkj](kZ*WH+T^Oj5,^$*i@IB25=XX/pMG1o-PVo^45_X]NlQ,m'_./=;rS1dW:+-A`
JgVIb,!!P`rL>EZ)J)N?UlYT&jAYZOVrZm^#2=>t$^[2j,A&=i[oR?sWhZ5=AEUaOqlGDE'CPa4B(32t
.96f%I7<0Xa,]3h5J4l'`Jh!g43+&aaFJ1'"_k"b(VlZGP>3\g5dhV4b.[,aS-d%oS?V%6+o[)th)1L=
)%6c(c=\jX4pc$0`*Us8o]>J:@D&mKHR:>cr'j2Q>N*1/5.[:tnPm>?ZCu>"9?ErH`:?1;o^rOq]]jjU
`jbHshn#TnO1<$dB-rO&ni4a7U<6(9pmLPHC;eqs[f>$7?g/bWA^BT2)2lofYBtnK3do&iRZi:$!_Ou2
%J?QK`DE;[U36a\e$Fg$8-P<0S!8*]XrrAlsFkq\mYV=;b`_a732(LV-T3iqWCMp_RGc]43;_>$ucH\9
eDO$\s4Oa4SBR?)bTA#(oE;8Dh/*f7*`!^K"Bg*WRemm-WcQ.s;W)%OHQ$/lSA;rkTI*r`7CCW<O>Q+r
nVL/l3iGQ')Hjc"S+(:e[%1VBi/<U*SAOn"].bgRH+;,0(\<>Mj"ik?S@1<.Yr\hjt!1420d_9MqPkBH
?6N7%;EVrY_F:0FeiH6_E4@VkTj*M_5P#+Xn@P^2pCp-$^3d?UT8sSD,8?6f;CMtN\pDrq,<5[kGFY+r
>[sM9BIlHQbT%U4Ehk(25eobgc_&a$TO,Rpt2;P:u*YQiNlH\14q'K#ar4aJ=-8mPU<L=3H>O]u4WVA(
8>N*T$nNXoT-=sI/D&VG@[^rqZ\^Q[N1*87taWkQ/))j&[@&8aB4G3V>5G`)!r!i0#[iLE#H#_ic+Lo!
^*b:DRD$(sqe:f[!5jVdi9mPq"':oL-48W=YlbU.Ao]r;?V;J@TX)Qp#JfFJ_-Y:R@Po[YMOor-'b]7/
Jg]CTF5r@f[>PqdqVOgg'%*'@E*cl%q\'j.ECMU,EcX5'!!8sb^ZR2fRhH8[[YA'*P_"'pBIAM[Ukc61
dN(!+]k0Dr!'OVoG4BGJY5CV?o#<unZ'A[mp_=m`>T;c&KrLuAZC=YAhb[BDRAiV,7="BO]*&^&iXB3;
(@itM;LW)RYcFa)VVg'_KrLY[Dm/I(DW#&L#QK]);prgTi'N(f/71il,TFQJ^1"s3SAN=OcBYlN"'\(U
o^J!;3?_=&_4WN31k+aB4e>bJcCNW8D]C4M*kLH1@5Ab=jrr<>;A:>J(0"7s-R;X4VIh1a(43_^_BZ-$
p?Y"):a>Tg"A\d'P(-Vp$fA@#94o!&tpj8ZI])IbnB^iC<H=)Ibjb?U2+HB7-mM1l;'pZqM>C^\Fo)A\
,rmMqtV#@9gn>F)Efp:O85!QHd\@0!#-+o"-PKna]Ot'0M0jq8fOcnf,fnJ9"'BXeLFoJ_GJ&+E5?%9%
l+5+-T'C0RdVle=5>>/q?nTfulO=Omd!!1).F%7[srBbRi*+Y_=G9qG/ql<^<c)[BG1rOfg0T=MUk2U"
hAA?(TEpf-rKCNU5pOp6urrBl(r&<T<"R0OD`OoKMh"`%*P"\Fmn@P4&1NLF(B*18(EF5Ein6bQ5rr=K
)nCRVtINJLhd?%GdQ(ECQ<5[[+-[+aV=f+\+_\%cb<K`j#mlj\M!.ot#U\7a<r'@!#:ZHW!j!N;5QtDr
Hcb_BO).L,/o>oN6Y_$6_"Dj*=3b-N<j8T+pO4emREpui'F#LNbI7$<0Ih(/V!P#kSN5HX&FpH/m2TQ1
.Pr"Ml!!etm!5VjRjIH!9j8NP0J*<?Sq"+Lc.(6A[!3n2pJ,2(C[\lHOI(on(\T5i1/RM4XY-cYZJ&;.
XC0%H,+,c@DH(tNgmFbgl?$'-FD:#f-n5PJ%WOt:Ghq1%b/sc7Q)EVYQrLp">]?f<qq*&,6>^;h053>%
DotQ%W!$8c\qa>Z;r'9a!gEO%cnk32fD+4OGf(1"b.bdTFauV4+bV6gF#[fi$rK-Zb2cfqYJopoj[ad5
0/n7P6@V(SZ&F-PkVHZV2J4JHt<Fn<\-mJj%MuF$8iTP_5Ho^u$nD@E`\P5"`ZF.'-D<(_l>DR1VOje8
!*3M:ErRJtK`E"oIbMe5[.VZlMP#lPq:<RE)YQ"S*S/u=(Sg',.2'l-Pfdg4+ot0)<n./a:rr@Y4HkI"
U]!mGW)<4G48("u5J$8*_)@JP&dM4\td`0@$2UEIDOq%Kp1jj3>^H;t`++j>2`4lB;2qkA40XSIl!/,R
`(?.:rRKlsU(I'm![@+NumkM$TTSK_<?IRrdlk/5]cO"jj^m\nl]HaRPDKRHklT_c@HEsRe:m*S_l<kA
+<Z)#EB\bugl<h!oMgcZ@lh24c?].)]G^^Y`6+l`8DeGs%fVPn.0S]KtSlu,eM+!a^_]5m+*1i!u3IEP
\3?[EYE_/oml)n<`RQKi4QFbsiA")H>LTSlK)N]kp4LSt]Fkp7rFhYJ+eGdWun5)ge`823WHn"T:Fm8f
iDe#a&l[C,YaG"G2#R'l`nI#Qs@#\4q(/#'Dk9l5eR^I(dhd68c/@E6HVrA\f+hcC5.I:Tq)UnR?QaaJ
=&,c?AfO&7ZRlbh<YAaF@JpHtb*r&,8hba=QdtQ%o`UF-3;Mf]!!+V@P5P.tC.Wk1NX,`/f\8oT8.;8+
ndb6?)fe!G,G_jhb8uknQP]p<3W:dn(G.TmNp4rYJJrONZ)>Ma[r&sh)UhUZ+?\a#+jESQ$9/n3.e0B_
+a#1QA0e0H6.3Zf7@`sf`.50m'L\qj]p4(N'+)BlL7n3#:1>YdjDkot#TXf/CL6k)BQ+&kcbh`9E9)85
An,0"$:]CF"e&,Ph0#kSsrX-:;!%.<3S:AcIDuTg5Q]t8JQHFG5/t61q.CPe=WqtrJph?J,ToR>A:D[/
5:QeEte^fc7C9@:,SY(^&DdS(P)>HXnHstRm[D]KC1L,n]93VO7\OF119VgZD.71HR1'0`YaiG74iO-B
8J&6hFg*#TC+TBE08D-LD/E/U*+CYZ2,q'Q0[S)VcXo\%S+7Z9E,_)HRqVV7=F8l4Md.)9DkQBfdr=LW
%<6K57UFGcKG-e*\nb]]Ah=Xk8A^sR1`mh)ajL(_[[a4Eo>P@I4mk=BKrr@Y0CE>;,WN'W='XZ+W>CR6
#2E&8_e+B+h*ZZD7OlKk4UrMa2k_X=!mPtWL$XWi5nV?h2pj;LS`*.YAmW?-X`',Eq^3b>=pfgMj?13p
kfZ[97J=n(G4,DrH!JpR+rWs%ciYVR1J+iTGNrj+S'=CX2.#3_`Hk1;Wlb=,l\ZAuudeLK127b>6kS6b
kY[t8&Oa-pT,<Z(n`atMe\YXO?4L(^sm%'>fWnfL;hQ?7Y3H2Np17h]>;O95?afDgmQSZCWm'KE&OnJ1
YO4pMjT?$n#<q,j=/bMgc>1$qne2.[I>:$uB.ZgbZ`HKCZ3uaa3fF/R:DCak?Hi=?Mqd=1=!"egaM7R'
4:C-01T"0,(`Tq1UetHojQ2J[!6m]:-q63ul#G@g$.qO!*kKQX7(p,W=G("M^WSL'"bomR#Qt].d<``Q
`5/?renOLE&#<WfHj51qo$YQBk04(h=L[N,"rr="H3)T?.!0R)0qb@(:)UIdsnO@GQ)Q&oCNP&;mB;O9
1abJ=dfgE7=3G3L_eZ_"7\o6>eibuiO)uO<\d!dT]1MH;m19tTi)S'N*J=i-=D?QfOacd_:_M-](T@nG
IrrBrDM;K4nT*KaEnQF;IS!cKrjniT!)_J_Hrp+jiGIGnR?q8XU\Qp2Y$LsC0kr!lHZJNaY\(1H2CArE
:bc>?#V1bc7`B.k3hUcu)/rT2MDl5hXP$T!q#+qT6e&>DB7.BHpSCS9dpQA%"\7g??k(GnkR1p=`-QPJ
Tlmf!.BNd?L1i$G/G]uf4b/V^AL=4Z,0Tj<mN!3$=$Fa@QR:AFqNh.HGk3;)m?]k'8IM;!+3)I<Uf?Lq
BbUB3CiB%*u.%gX!.%gX!.%h*n5MF#l4socCm1nXhD\M?D(/9;</)0qS3H-@SRc6ht<';*i4\%gV:(!(
Gg\qNNqe53m"gYN1"7\kC)a,k#J*[VQn>U<r8C#T+HRh04=V'=?KC[s(d9j=h_@M9k'7LL"C;1OlH[QW
N=;lN.&i=ls`Qe\7#;W?NWaZsYg)&r+8*/QUPC];ILpEX_<\6;aH8N!CrbLuY1\87q0c:10m:f-UCVNj
*WNXGBgE3d:=3Eht9[A[T(VV$e55W0F1!sklF<(E/MbERkc&JptilL;N8tk#GcG]cB%39jk?NH2(<5@L
i6>\WmIp[d$=?KP;\7jHNBg2OsfA_)Em6BNiMk:Wr&`7g8i:aFMf\UB][+-cdXntPFUPW#,M"m+<X-0@
fc9VoHO"C6o^Lo4R\+XV,c\T4^SgEkhjdl(WQ[1g,a`S_a<5`Gg7M*Sr91HF!$P6/nJX=^2ZrWEt$Ij$
u%[(gLmd"*RRFT)MX,:#6g6,K;H<\bke)8:5<VpD+$M][%nOLFp2#)J_UNpc72ppnHh7PZQ,6qUC>H(u
#<JK(2<"><"Se(dU5AUi5Hua/Z%nlF__n!2>2(Ql7,J(J#2XN*=b-Lr'!k'g6i,0ClXt/kuEQPC.f=u5
7fe^O7`7cQ3nW(mdXk?+*C%aJE:n4IK/?hP4^BaO9i8bqF($X2lZWpL%\ocGk<gBA,4$.OHlBt[SKnL1
5N[[&jb1cSkl?RmH.JjPOAGC`Q7fNJ*r:iG8D%=_IT$$Ugm>7W?[_0%J6n#)=MTL[KDjrar^l2bdJ&O(
o-fQ5gce7m0_7pk:,3ejY3R_lA]Wpu1[[S7U`lp,RNnDa<9JO)C<:3^pXg;eiVM2/:IO3Amr(!I:Mi0/
ReiT?]eOkZBFUYC(!>u"]5W*;dV46MUBu`X+gQgGt>>&>4Fk<VG*2`tb;HgJ+pK)N^f(SRco]U[jn?;O
srr@Y)r%?Bur"%c$g)n3NIYS?iH"&RUp<g2UjrlmZ:'O7MHDs'Z,hGK^>^jnH[(ku1iU76N%nHDIiL0>
/*m+es9<D)P/T*ET;,QA#NNknrUjErD73D[_K=D%/ko)"`itM*Af27-_]=Nl'^9=SdUAi9PrE[fkPDc`
t:$B/@M&oIi,lBOpjm[cYkkK#bCJsZHeW,n'EVP!""fH'lQ^-VFR8F[YFC@)+i&9qnCW&a0F8Kg(_a&^
h8q4^+nG`Lf&l5ubUE4:(g%K\t:Q`!Mg%,'5h.JhCo=oe$?Xlr39/XXbX\u61)q<:"V4R#9f==m:]KKF
Tl,lo22-T<gZh\_0I!bC!p)a11]QO*C?[g?_%uP`JCN-lW(V2Y%Fa*C&\!FJZ@X/A@m#!RV0iHc2JUfS
+3W?o\*.3&%B1MonHi`9P!lN!:"c^g>*Qq'`[b@"R;';%RpG*P<R)d;ujDEt^IAujW`@m.a%fQi\AUIq
V2oLjCH@&o!]Q5nb87#="KN*q6R,M0:%K_j@)R8eli_P0?/bhZea+"W-Z)DA\D'Hf;jN/8c*2<Ru.^J#
to`HEAE'^Y*k1QOZ_Q&LTMW@R"7]l0hZeG+5Sl:rtV!0m'Bg-^N[8-`%&mML*Il$1N(]M6X[9fQsT%E"
/QgrD>\(^QACQ"`upJ3]q6ZF"Mn;nnn73\`U@?00aWfF!TrO"jumtm[D?]VRD*I&sNqCHQ#TdH=Y#-;B
kk"0*F8rX`\S_e,`Ub:JU"h.ohTrbF6q!5b'&%'=,]Q`Ak2b(-:D^miN;Y_Gpj=47SB-7s5=G7`VVpNp
`3m;/ASDe@!V\NmIT1^K9ka'32-d1O>Ua:Im41iW&]&!,GhWKc@_r/l.PN-$'ZLd$nM*<>4;cN9&[AYk
GRYB:u6Ogc%Ku=Oi?lPWAA@"`ZZFZ&r>-ktSO4cn\8&;A>plFAu`Q`&53j4,t7:SR9FT!iOj6Zp-<(L@
+@Yfis&66GR^nMOtQRCEL&q#0'9C^Ce#sK+!ZhmaEW?Y'u(,NfPBAL$<C+el>DHA'DEEunIWG1'EST1`
H(\$/4>/J`o?!PMsNYp7]B4br`:]Vi*J-BRa0ZMM<4=m/#GBUN5e'Y45DO*,WJ\fj8*)'u+ARtV>Rb?T
5>G!\K/cD"8!,DN6fp_p@`**D]:E9-g;=O"UFHY=\Mkn&Xm>+Y!Lu;Vk8VRSuaDho,CAl!!I`u0)(&.(
8nG?D'd.L*d<:ShIVi`$oGmoUD"JS$!Disq7#G'&B$I/^DTW3RtG\?`Hp]KPPLlqTcn;"ro4]>RQ=eUI
DMHQWlZ'cOEWYeJF'>sJ[lc"/R(p(V0EH&$$?@+X!fuYh8m_&dX^h)c0d<FZ_?M2fd\m:`p0>QJtlh8'
f8+GEL2-kIu_,lsA[FCtii6?5\nd4G]/iKZ:5d.[&?)9et:ju<bEr7Zh&H:;<'):oCm15ueS)NAmPA8]
qKA4LjHIgqac^6"Q^..LWQ,*4$#!"'"qE*]Wm7Zpri-rEGL&NKFk\6CX2J[FE^\2Ngje46H)_jgtI)s3
g%i+:.L)C`R4QA2PmjA7&j3)Wc.7J>a)V3eccVH"5Ac&u3[g1/qCUDu+/\a+&^DMF:?QCsFg/@\*LVP!
hH<uoKQD&;EpDU?(T$g8tJ$^E?jLfO\*K"ag7R0)/OcP7SYkRN.nB^fp*uOY=N#E/eXkp:"29YeHbVrV
m9-VQ$T4d_d3/b6,"_8Ge+KsTC>#AE%!,c;[T-NHHmjl%Ng?>$6o`"oD\\Ihj#MO7"YBua14"'+%c].o
QI`26d[HGK#Nc"=@rY$pd=R)4Hp@fJ<g$UJE>Q((qP'0"#Jpp-t(pGPeC]X4dL;2[krr@^n:]CEJ]NP7
7COM'nm8**)rr?^/7`"54>Q/OoIWk/B(sb'_MWMh>'sX"^$Ahpnb0&F]3cMS93'*7n)n_`th=^2`j83Z
lb[7^^m5(g-RSSTZrr<C/pif>2RMb](Xs:N@iP5k,Uf&hl#Kq_6H+.GJ`?,]kc9J`*M>mQeCL>c4<q.h
nkOR=g8["RU[4A00Rs28.AV:.0]P`[%GVQ4=>dIM\PZH<*CeZrIl(o=bh.bKOPt\4h;RK,Vb4AY[o^$s
TnFQ?@rO%(kr#kMO_(Q5l_r9MH5Dd&1[`NMPj%g2T'#QAghEV0jC8uJ.@i8RMR^r;TI`7qdQbeS%'R28
-`]aoo7Ic\)23t.g@l<?![Vd\"&d_qM30tg\JRHN`?^.PNrFn]9;`r'!K]:L0p7(eWX]j'4@k)aV%\2K
'jmK0&H0CjckB#\Y5@e-UAGchcIqQGra'Jr!1gO;\/nDWEFZi30]7$tP+H@d'D,fBuD7`Rrk;d@=qr1]
D5p!Z8,3_=uQ\@P(dU2cunSbf57o90>1Yik3bN8q/.iB-:D,nb4ad.</DkO&1kF?$n.(*W#F6Je"X_Y\
;Ku5=T`[s9aa-TkS7ea4al?q.Z3.B2'[[4fN-%%@gnT2QfBKAnXH?<Es4'%e!mj)%>+Z-rHNb!rA-^_k
UR"a5o#EBV9?a0"dIGc3,lgai#`Ld[E28c@uhFtDF=2%A6gn]iW.36!0rG)rF!$$1A^<`OUB3;[hE`%n
3XY4g3[CttaqRtQ8-GmnZMj1oqGl,f]XnQ$gZ1=g[/c-$*@/,BO7OQ7&K3g=\CbCRM]A9R6iN;QcJtb)
:YXkjb@Yq>BbAPD@"a5A,rr?XQMa&/qAgtG3Ht`;;VeWq#O&-aTRB&\fjP&A6J?$OU8t42&8;52sH+UL
>5S(M)=hNW/iCZ.[mbFtflJ!i_m^i'J=\]DuUY#7,k#Z`XGAdD.3Zf>UT<Q)tI%LI_07l-t*W/&AN718
i4s#a7VRN&hib.(fcj?A_NT!`>1N7Mh9mSbbmJA8Y<VUY)+2n0Z"hl2Y:9^>9?IJ8Cltl=+*V&Br3_5;
cQ'O@r[e2^!!4soq-GG&*WjZu.X\HY&Uufjs;V/Y;l)W^<m@c@WHlX,_CRMRO?"Df_\(f)E/"\$bb^Zm
Qm;)S_GhP7(2r^`hm.;krqUPL:CLb*<>K@t#+uStoL;H<hmT3:FkE;K=LWAl9(ZGq2n[X*.rltF)Z-[V
$]9^+DNr%a;Ia<1doWYu*\RgsU>o7]9b:DseWi2q`H&m3J?VY47rRGU855tW2fThWX<Zft0b+7+dl1oN
%RGbgjIMVq?CNFPM`1Pb-_m(E*U=)+F$cR?9,b<0:]<s%V!#R6sk/\ABQ1%[R,trGbP31kXnkb%ToTQ;
H$Cs02RSV2R?flW`m6UV%pb2?-n;$^DXgZDUZW9+NZQ+78)#jR<&*&WC?c6@D?^[N!IN/(&i@g/YHj/Q
D*_S(S`_8rCIG#G3A4Ge(_iVe.+G'Cp?_;i;<T!U3I2Dn$]79c0]<A$h9Z%J8O/b-`1tqML?;J'.)uTF
E?nhT\=8L?GP%d-<kNI8*r"E<.Jar3K%g;3)%.W/p]p$=-d4I4I,V;0t;gI"eF8(Q;=:`o51Qi+fVCUZ
pp`qfUpkA@gJ+iHIdB=KQVbW7j<\RQU>'e.Hpp8SnlI;r$;j?+pX6sgX^aPq7n]t;cU5Aq!U5Aq!U5As
KdJ^YkBYPR8@/.@7GSa:uB;,*%=h:lBdd?*A,aK<S-Fo?;nhpt;!>Oo@QY3/l,(@Ts./g#*7b?7q2OiZ
25&Im6XGSsXfE^d4A.[0#5pV&\#U^mt[i,'3rrC0XGk:pT9iq>p9-pdgDtk]Xr0dQbKKnlJrrAr)Rf+H
d`ChT"l2=a2HS8$hg[f`?2a9IKn?L5ZWh3C1V0D6;P$XUV#HN)2_;6%(J)Q;=#'_pmLJQ@jpjB,(4*AE
7k9Tni,aKuQ/B!]C,hA4p=6C3\V(8nE(o7sXF2&Ih.!SPGcbo]Si_PQ3R5F:d-#$E:+#6DjQm,"X``\j
t7S$CHYtt`J"Fk?>N">EX:QH:KZ?%sWdi`DRGhN=1I/a0k5$sI`rr?3mn:YGEi+AP[!!Q[.!0_`VJ*_6
crrCJ?]%c_%SfD,4-EPOe25mt`!/4p1,k<jIqbPmV&qc3'q:if2h44(CrYGrrVjGl9;P-%A:0h'q0.So
\md@`K$PeQ<<6%t5:4.p1k0YO1o=B6#b2/tuN.82DYJj;ipKI?In4UYSG`'gIdI1nZR%%!6epS#AB/,u
\<:7tmI)!6kQO^*u<3%+5rr?H!LO+Hi%g?592=];62:oJiET2/Re3$RA+uZ=8i[Z>f7Uh=XZB*iW(i?&
8"QP,?-gY:irr@h%Hs1"&jmCX9Y24APAAaW,A+DM/J&*L^jG<Sdrl1i8!7GO2d]")F\UH$!-1K/)maL`
N9kq7]m[<7Sb:ptFC/o`t)f!Ks2caYVqXs4&o[elj/M"]l%@;fk.pjL@::-&8c6"d1bDJ.aMj>WY-j(`
XH]qbJW.*Njf"(<t`1I?"%X\bsnMK);Z+ci0\@C+DUH;X68J2l+).$4hClL1@1WV>OTY5aY?_@>u*^1#
-Mni[3HpRX+rlH5uFPUuW`r#X+=AKEAYg7Th[*J+fRiGR$[E>r]E1;KR8DZ_ojS4*T1:6(KG.lYegs,M
+VlrgE'@tFu(p#;;8qtIbf!Y<OkaH9^\pan5hZ84C0+7\]p`ZbeFRc5f%tujR$W<;Ao?Pk"d^rC*>VKS
)'$OqnW"cQr!6JV!LTp`j4tHE'_&Bf%hZ<_u\%7WQoU2itD-Cil_[ND%n4\QK'0*i_BA)Dsr80Ne9mK7
J?eSl-^U/d_.B-TYg-H4FU%kA%ho3UT4gEdEY]Bs.0Z'-c&Lg^-k)X[#==EjWg!&-Qr"C.3qa5F/rrBn
\i\.ZK3SES%kGLHnd&EAjY`ttbV%n2S6^O6979]OEdr"`l7^P-(j7*tdOekgRZDQg0b*/%&[V;P(>BRZ
XW-f?YVS4,LBD=JO`bRN"9X3&I@BW%CUmhZ6N(GEK"sd$(Xr2Pd%#&*3^.3VO!!OFqFY=3ih\*XErlob
TWSm4Ugd),$Lc$3%4"oG_;*t(b<1BA(W7m3l<KWdun13YIK,Sp2([Pf)X&j-r7C8ZH_m%1)nZ\#/0:9=
$@gpL*N0OVj8>P8j5=keS_'en-2K+.q+OQt!JZg3dA<Tf(Z3)@l]rel@ZLnRE3<1FY;6eL!R&m=jQd`-
@a.5\>MG:Khe7A5IpX[LaDUUAYAshr%V&CggN_jb5,js-E=uC)0GA[%J)#jTC([Y#W+,KpsZY+p'J+4c
W?+SY[57l]-:F3UIMJ-GI/hNuahCrhVKJ@[Vj8ol)\..(MooIe0iZH(?"84mdpoE@\LQct4_tnhQWTjq
cg?K,o/857YR0(Pidj$T,Qu4#U_/k,9F$K.n!KYoq!'fUT[/U-QAZgO@O2p'0p2Bs2Jopd#i[+;c\+^>
WF_R`;bqhgAVgV%qmG8HKm>YY?Ob;c_a<XebUJDVge!1b-buVtLdV@(p/R>Pq/o+fe^8B8Z;\,?s<MlB
?/%K\rm];o*?JTIJ-.$P+rr<3NnR]1[S)W7Zm*.Ya'n()o]1l2``G$"-0LI&PLg.,hTK+.#"q8,#"$Vk
;9>s+)^M(C7b?an6AYE>n()(p_;SUZs<3]Jeb3gd*d'*uifjg+)LL/o(@L+@D^Y1L'O6m,@^\0h>4t:q
Krr@^9f>IHGLa*g\Sr%*%[uDjpbY2S'8B?YsD1K6VDAh2f+'eROrr=IV^Ae2<0>rA:2YO<fJ\t<X:;&V
89i^:uPCFq:<Gn*Y_rG_OX3Q[djTeGH?7BZeW@j50DK<M]8AFs&GjG@C[/U.)#3*A4e?nU-=OXE0NF'I
@X%TBp)lm2!K?#fb$F2FWL/J<\*XFXnrrDs00E+5n3r]2`XZugc6+F,'X3T]PD!J'-?i!AX/;IK%P'rt
bccs4[4su9HkO%Hl%:d8i%Wre#1p7MWnEIY-nC<9X(k8?WEMR838Crgf#@[a$S794"rL\StTMYPuprK'
2]MJ$Kn&%2N_W!Pfh+Z,;E=0%b1*].(N.jhZS<1q$NcI6Hp3?T;Pb78Kp,7/Vrr?r;Vh3XZe,B^J@^W\
*2);M'N<4^VT^H=1El=,fP"g?7@n-oaPbV+mP\>-;?0Q.hD7]C(IkRp]_SS(+4%<5\>\q"+>OGMi[=1)
_+G8^&cAD(Xp-?@Bn$L8,[aVX"cPKi#rr?lB%d^JjO<IY`]1Ib4:3$iq;PWHJg8jqKn@.bjiGCeVeFY2
tD,XK#dn.u^S&nf64e?JN0%L<.*Iid2R?R`3beGS+!5VaOjP_q&q\&;r!;*G^^4H6qrW;k)j2RACSK^j
e\j(st95Sf.IN>]EmntRA6SX:$+@"En%'aXt)[3[844T[PVB5miGSaQK&lRjnP?K9<]<Z@%>>IVp(%JQ
.NDs*EMiF:%[r6J%G*^ao^8?[?rr?hAL^j5MBOA*\`.*=-pjW*FduE^<Oa*jD"EFC/=`Lide1hIA`-u(
r.3PqS[t/pGrN<nKh0\j\n=P;&JM2C*H(aJ(6>m*2Gc9e+RV<n,@%MJp'.^8PWX=iZA*5ip:\uSidpF%
X"8lHQrr?X1!08%0jOQ(kgZ]W)XkKJYd\V4I_GW]!\cQ/="dgbB0p&B>nGYS&J)I:!3$7`Qpi$047G-3
e)Zb`3j/3bmNP1O?>&n@]g?S-"VlJ>!\pE3(@PQF!i*dp4=*53\BdUFEfkY3&SsR-Zd`^pjLnD(3?NpE
5g\aqDceqAO4a-Bf@C,HN>+/_i/E,A.q8f7Q'NL9f(dQ`k2Uu_1f=u6"MLGZsIY[Gdi_SpC2OiYgH>?l
mC::i3[^hNqRPQG!_BTIk`2pd^b8aoTc>/17!.qk/hLEH@j3-,UmGj;][*O6"CA"4o-p53\rr@d4eeoa
<g@(qh@^.BR2qh\)\bGZBcb%KIh6UF2*smMl=D:Ns1Tr5TXM*,[A<ic[hcl\,,8H43R$bag0<pCM8Gg]
aD;B?h9-ZgakO"1Gn>G6RKCNa9n&(We)L-a8M5>W(cL(#dm#s0(H-PE\NLA[3<sh;F.DlQqQtlX$n5V.
.^Bj'&-U4r?Wk[8kF?IaK>KO9k.@#C&5EL?@7dlja:FqbQ2KCPG14R+_87X6:cRY(PO4UN6!5UYF?hR1
?K.&tKQeb114NUYU/mEtE:8LQfmM0:DM6!GCSsh<qkY,tVN\;7WFR&EGdZ"/>m+YTFlhA,k1%=f6$5;G
A*W0ubp^8J9kOq&B9kmBe;Z?`S\iDspjKj92rrD*7/=p%c,@Og>fnC]6StAaUY'qX3+1/JMq`/B*Zb_r
E0)889W@s/QrQ^pDN!n)VQ&kT:7jjNCJ'8_3ET$is\#,^rquZi$]Jo^TkdK)@7B%5Ap0Y;1IXT2/8>im
oUN.SE+BI87+$'>ib)^<9L@j6(+)8MNrMh`R-84Ct&5*djf?hFu8#=tN8=(aL\"JSE4I]>2DAo)s$(',
V`u,4WQ;CU`Qgl_@^+GM^SjL>(Z.1Ri#qD")1O"#'_/$6\]6=(tTdZXmq,?OpMC>,!MC>,!MC>,!MC>,
!MC>,!^HVYti2aW`E;D6dM0An!qH%lJTU#?Irr<4.rrA7<d=:LU\,QHV]=Ri&(&n8rZLheUnMgB'T;jt
;p`qfUpkA@gJ+iHIdBAJCi/liGiYU'8rrCfrqaS-kO8_XLJ*l.l-77M2rr=6hIm<l\KbRBj+mfFI;*Y:
!;*Y:!;*Z4d5I=Sn!/uU$kP^EeVuDt)?_H<G:J^dBmg/pngdD)A:)>e`oD:uV!6N(PoDZcn;uZhijfd$
Lpa;^3RJ2AamNMT1V[JsjmNhf4OW>NGrrD:7pg,!@!0PfM8Uotqp518m^'+>.SbTJZ]>B%94s0&s%D6O
r1[4b#6"FbVG"E@J#"]E;_^bn!OAt6K)+b(MmJd/o59.MtM7s>s!5hZK:%8!r9@&(s[ta;(@1SqVo%)o
mP\nP^Ei;_.D_L6&I[6_?0_pGV$VuqU[(YhSG(%oiZh%41*[:]>`D<)$Fg\BA='_Ac](1.g:#l6Rfl1\
UZe_PGlgTtp("\*1\5/H:E?1t2UqF-S0r9TMR2I&VO1E>>#i(g$`G:h=R/[.q^E!6t4t^,>9DtT&[1*U
U+k6EKrIO&tG/c;;q)8iG]!+Z\X13i::'n+sBWI/)NK,'%H+hlhh9p/L]=UepcM(TNQ<T!,Gh2!NUL^I
[Z<]#PXlXDGKm^e6J&+5E<UfHSf2pmsm6.NFG>.N2So"'-)m'T#\L!36#;QT1?,3f5O\oBdYRS]%l09c
M2E);%;H03OX`W!*gMIjE6VKr[%uTIk(9tQAD)Hb79g)9*pfI>>Hn4u-n36$n<S`5W[,"Z&Re2sBc1Ss
X#!`4fei"kjKG<(70lUCnet)[?Gk8fo&(NiUp`K4+eMQ.dlPGO4mY]jAJaOR<fHcOF6.L__5cqFo#UC*
-QoEI#<j_HlFZE&dGNO*n8aG6X1nU3mSm-f:@ie9`X"-*8m<$fmadaH+^LkfErX\c_-bu2n$:f*pqj:M
D#d4/@De*67:Fi@Hb"AWC]1QpGRfY!F#LPcoQs/s0r(h=8r%S)K29ufR2X$F-[+:9'm,`kF:Gc,bn)[N
@O9.[/GSTnJ'^4\IL**%NDr9+%cL8KHlfJqfg^YJr:*0t'f2c1aCI>o:2h&_0,P\h=qa(!e#ON>e#kYe
K8Yrt]?FTp^]$t>;):D*Qo-,dJL1F/5!oq`e?bl[AY]FLX!!Do?J6kG7aa)kT%oAi:N=f5^8/k!g*M)%
"nk6oSNQMTeH'lF5NI;+%=8'(1W2`I=l?pcGhY4_PCYo&>>A-h+?3So&>W$9N]rc'Rp9hQGpHDWbrr@X
_>b?`eIh$V)g-8rWO3U==HZ-5Ol*_&`#'iDQkE,6g1+6Pq#F\BoXkafe&FkO1^'!8?'(GY_4g3V\Wa."
,k*!c5WnE"bHWVlti,-E70PO[#5%g462R<MXAJJ+gZRP,fhd15U40H2F>EKnt/rn<CbOJ5CgRg_0b?qM
=M>mQf0,W$<l/*MWeF^B:8nqN_r$12(\R5r6jim2#Td53o80hgNf=?-p_cYH:3N-Y`*nPnIoa@6,@^4F
sbd2_\AjR,K/VjqBLi&sGis2\mU:G8'bXOA&[]JpMp.K;f,bN<H_r59;./PJddHu,Oo5<dfDrGp<':Zs
*%/qpE^DQ#0V!bFo$U%GUGKi(%:RQ[5a3R8<Y*e?OB2[eFq8q^I%K?D2kP1_-'2QVHqd&*/_G5#5e,?L
50DjT#gQ2.+gTtP7jl9t!PA]9D^8n!??@A8&3B=.JDh]3Spib0Hrl*&[<)am%^Vqf%n%&#`a%uIXB8Z[
OHq;aN+o&87Ng-riN1,0bSehmF2S7V^DP_5M&:qRhcrcIOQ6s1=MLVlqLjgt(2t1a@]Mn@t<.>R+25^6
mMT2)DgafrIc@SmlC+N240:TJ:Ao5cF*rAB=rNV`1dn4E2pjLfZV7UkSVnZ.0!4$YBc+*\$(VMDC^OH&
DSIZ8#&+":_#KAb&3rF3sZTjL.lPO)l75l,9<d+1`2ds@pAl?cUEbu-ub<?fbA`s%WrrBl!J)PDFBV4<
tL-@G#phs!=2U\nOV>8@F`!DL$Yt1'HdG\Soj,t5l)itm#$7]JRA*MV=Z(7GrG#h8A<jfY1:Fj61U[4f
bX7L5tIeUPEo/rM]hm+&LrZqCUdf'f*:[qc'Y?Yd>)6LPOH[$W1=ddGn&ia^$"K'0I!X.f0XuKtjK"P[
SI0[[I%mD]Hd[GrI]H?+C&ZiW0D;j\pRh<Y<2)D=oj[,NNjFnj.;K=saU6Rji*D.q=T2tY\c0j-6])=0
[9Xb+)8]i%dh5dBXG(0#T\`=j>QgD2]r,V9BO79Wprr<`T_>YM)A+K&pRnY/((#g?p>G9!?OHF?)/kV:
+Od&`nrlX-([uN[bS#`YTj5\\ALcdmZX"6FVRn*$Y\"'sH3]8cb;i`UI:n`g83@ZQ5BW5-p0ju+BR;tH
-B^`Y'CZ!G3/,MO=oqdK+I-XG]mFp1"]WG](?e^e):V^>k:Z,iO+2[I[NG$0`pp(9E)c!chceG:Z8D#\
C;Jhdf_3a:Q@+(ibN9%1m*shidBtjt')/+L/oV3'iUZo$f]^XX27DtmLGqhQZerf\ejRU>:or^g#5I$R
Ac1&cln9E!iT*juQoda?cXtFXqDS2jf+k:4jeQ`Y>^ht0KY>D@+fZZJInAA\F]pr;UoriT(VOsnLn5r@
P0bVE63I0=Oh7]o'HiAgLU5JNf:ai&q!%=S!!%=S!!%=S!!%=S!!%[[0rX-:;!%/;OrrC]<DuTg6GBN`
g?_;i;<T!U3I2Dn$]79c0]<A!g?hkWo7XY49'7\*&qP362#^f/;L[b3.#JaY/f!IZMD#7<-5,gECT=6n
+q.r!"F(75Mj,U"K08G%a2okgAL`.;1kJo4mbm_2&W_3c7-G*i318lZgP6;KI*Y!CcDL=8?!0WK'rrDp
+>(>btYL)er.*A'V.&QA(ZKurK)SKh6N+43"esCg2fKmrC#>-N:PP*k.MC8J!MC8SH^Mf_YGalP,ZPL$
Rpd`8(g/[c(<amT82Y#^n"'ihO%YQOW,T_48^HOm@U]1=-J,1g)2#dQmWq65jN`Y*[n57O-1sLOL^8uh
VW[dqqYL'dSN>e4,gu=s?pIY"6n6Ago[62;U&o6<-2S-u!:t0Us?Vn8_[;5T@Y-+X9Y-+p>BdB-:-(3G
RP0?KCP&a-tdkCJDTDY,OKR`D5rrAr)Rf(40duX8OTDY,OKR`D5rrAr)R_CE'/V7?T^\!p+_OBUcDttL
SPnVk"U5Jm4r;\7?M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'
!M?#'!M?#'!M?#'!M?#'!M?#'!M?#'!M?*\0~>
%%EndBinary
grestore
np
662.88 582.72 mo
799.92 582.72 li
799.92 554.4 li
662.88 554.4 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[137.04 0 0 28.32 662.88 12.28 ]ct
snap_to_device
<<
/T 1
/W 438 
/H 1 
/M[438 0 0 -1 0 1 ]
/MD true
/BC 8 
/I true
/D[0 1 0 1 0 1 ]
/DS 
[
<~rr<#us8W-!rqZ)9GB@hEEH,r;F)u>@F*)MFEcc];s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W,urSDmBFE;D?E,fi:F)u>BF*)JEEI7K\s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N~>
<~s8W-!s8W,us8W+jSY)UKTV/!OTV.sNTV%jLTq@n*s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rVliss6Q>MT:hmOTqJ*PTV.sNTV%mMTq)/^s8W)ts8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N~>
<~s8W&rs8W&ts8W,-_9'gAb0%rNaiV]JaiDHDbK%9bs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!rqF(Jai_iOb0%rRaiV]Ja2c<Dah.TOrVuots8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
36.2401 131.04 mo
138.72 131.04 li
138.72 87.84 li
36.2401 87.84 li
36.2401 131.04 li
clp
gsave
138.72 131.04 mo
137.04 131.04 li
137.04 87.84 li
138.72 87.84 li
138.72 131.04 li
clp
137.04 87.84 mo
138.72 87.84 li
138.72 131.04 li
137.04 131.04 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[2.16 0 0 43.68 136.8 463.72 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 9 
/H 182 
/M[9 0 0 -182 0 182 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
ir=W1K)^H&K)^H&K)`plJ,~>

%%EndBinary
grestore
np
grestore
137.04 131.04 mo
36.2401 131.04 li
36.2401 87.84 li
137.04 87.84 li
137.04 131.04 li
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[101.28 0 0 43.68 36 463.72 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 422 
/H 182 
/M[422 0 0 -182 0 182 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWfQ~>

%%EndBinary
grestore
np
grestore
gsave
36.2401 131.04 mo
138.72 131.04 li
138.72 87.84 li
36.2401 87.84 li
36.2401 131.04 li
clp
false sop
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /GVPBAA+Calibri-Bold
Type42DictBegin
[<000100000008000800080008676c796600000000000001e0000010286865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000746c6f6361000000000000015c0000
003c6d6178700000000000000198000000206e616d6500000000000001b8
0000002867646972000000000000000000000000000100000006028f97bb
cc645f0f3cf50019080000000000bbeb7ccc00000000d18dca4bfbdafd8d
09ec085000010009000200000000000000010000079efdda00000aa0fbda
fa8609ec00010000000000000000000000000000001d040e000001cf0000
051900490362008d0442008d03c8003f03f6000c03f30047044b007e0359
0048044b004b0407004a0288001903cb001b044b007e01f7006b01f7007e
044b007e044d0048044b007e02d8007e0331004902c60017044b007903c9
001603ad002003ca0016027e006b027e006100000074007400ca00f40131
019001c4021b027202b9030a035403a5042a047104a404c7050e054905a0
05e70646069406db0720076b07a707de081400010000001d0120001000bd
000700020010002f00600000000000000004000100000001001200010000
0000000600130000574d48464e462b43616c696272692d426f6c64000000
00>
[4137 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 488 4 <0002008dfffa0403050e001c0029000001140e02232311140e0223222e02
351134363321321e0405342e0223231133323e0204034482bd806c0d1e32
2726331e0c312801312e537477542cfeed30464d2970763f55361c03856d
a8733cfe630a100a06060a100a048c2f2f07173e5f7f6244582a0bfe4922
3d55>GVPBAA+Calibri-Bold AddT42Char 
1 2588 18 <00020048ffe9040403d700130027000001140e0223222e0235343e023332
1e0205342e0223220e0215141e0233323e0204043c7ab87b77b074383d7a
b77b78b07338fefd1532533f3854361b1631543e3954361a01e972bc884a
427eb87672bd874a417eb881426f522e294f6f47426f522d294e6f00>GVPBAA+Calibri-Bold AddT42Char 
1 2274 15 <0002006bfffa018d054e00150021000025140e0223222e023511343e0233
321e0215131406232226353436333216017a0c1d302525301d0c0c1d3025
25301d0c133e54553b3d55543c220a0f0a05050a0f0a037a0a0f0b06060b
0f0a01304c3a38494c3b3900>GVPBAA+Calibri-Bold AddT42Char 
1 2446 17 <0001007efffa03d203d70032000025140e0223222e023511342e02232206
0711140e0223222e023511343e0233321e021515363633321e021503d20c
1c312425311c0c132439263062350c1d302525301d0c0a1a291f202a170a
4a99535b7d4d22220a0f0a05050a0f0a01fd414a351d4643fdaf0a0f0a05
050a0f0a037c0a0f0a05050a0f0a6750503c678a6100>GVPBAA+Calibri-Bold AddT42Char 
1 3212 22 <00010017ffec028e04b1003a000025140e0423222e02351123222635343e
02333335343e0233321e02151533321e02151406232311141633323e0233
321e02028e0b12232f371c4b6e48226b1314050a0f0a6a0b1d312425311c
0cc20a0f0a051413c32e3b1420191107060b06057a2c2f130f0b06264f78
5201c92f371d28170ac70a100b05050b100ac70a17281d372ffe5d494907
090707152400>GVPBAA+Calibri-Bold AddT42Char 

1 0 1 <> GVPBAA+Calibri-Bold AddT42Char 
1 1704 12 <00010019fffa02980578003c000001140e0223222e0223220e0215153332
1e02151406232311140e0223222e02351123222635343e02333335343e02
33321e04029804080a0607111922171b271a0ca3090f0a051413a30c1c32
2424311d0b70131305090f0a6f244d77512746280e090404f21d23130707
080711253b2b520a17281d372ffd2e0a0f0a05050a0f0a02d22f371d2817
0a4b5b895b2e0d0f0d192700>GVPBAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e00000111211101112111
01140e020707060623222e02352726363333323e0235342623220e022322
2e02353436373e0333321e0203140e0223222e0235343e0233321e020103
dbfc4f0345fd240279213b533105012b25171f130808031f1e0d2533200f
4b4d2336281a05040806030508072736422355774a22ce0a18271c1d2718
0a0a18271d1c27180afdc2050efaf2050efb570444fbbc02e839583e2406
790d0b020509089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a
2a4861fd991a25170a0a17251a1c25180a0a1825fd3b>GVPBAA+Calibri-Bold AddT42Char 
GVPBAA+Calibri-Bold /CharStrings get begin
/g4 4 def
/g18 18 def
/g15 15 def
/g17 17 def
/g22 22 def
/g1 1 def
/g12 12 def
end
GVPBAA+Calibri-Bold /Encoding get
dup 33 /g4 put
dup 34 /g18 put
dup 35 /g15 put
dup 36 /g17 put
dup 37 /g22 put
dup 38 /g1 put
dup 39 /g12 put
pop
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold /GVPBAA+Calibri-Bold findfont ct_VMDictPut/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 216{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf57.84 104.88 mo(!"#$%&"'&)[9.59935 9.5993 4.32544 9.59945 6.2334 4.07336 9.5993 5.7653 0 ]xshgrestore
gsave
36.2401 131.04 mo
138.72 131.04 li
138.72 87.84 li
36.2401 87.84 li
36.2401 131.04 li
clp
false sop
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 1394 10 <0002004bffe903cc056d00260039000025140e0223222e02353506062322
2e0235343e023332161711343e0233321e021503262623220e0215141e02
33323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b
1d302525301c0cfa36633631472b15122944341a31333620220b0f0a0404
0a0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd344448
31526535386a53320f223728>VSQHJN+Calibri-Bold AddT42Char 
1 1556 11 <0002004affe903b603d7002b003400000114062321141e0233323e023332
1e0215140e0623222e0235343e0233321e021527362623220e020703b629
24fde11b3b5d41426449300f090c08030204080d3a5a744277b3783b3e76
a96a709f6630f4035b5f30472f190201fa2e2c395d412213171307122119
161f160f0e1817113c7aba7d77bf85464275a05e206a79243d532f00>VSQHJN+Calibri-Bold AddT42Char 
1 2706 19 <0002007efe95040003d7002a003d000001140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0205342e0223220e020711
161633323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e
29190a274b4e532f628a5728fefa11294332193133361e35603431452c15
01ed77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a
69283d29144d86b277396952310f223628feda4349325166>VSQHJN+Calibri-Bold AddT42Char 
1 904 7 <00020047ffe9037603d70033004000002514060623222626353506062322
2e0235343e02333335342e0223220e0223222e0235343e0433321e021507
23220e02151416333236370376142b2a2d2911378d56477757303d79b477
57112741303f634c33100b110b060a1c465e6f3b6995602cf7603d563619
473f35592e1f0e100707100e473b4225496c484e734b24362a3f2a141c22
1c0e1a26171f241d231e132955865cda1224332138403634>VSQHJN+Calibri-Bold AddT42Char 
1 2880 20 <0001007efffa02bb03d70033000001140e0223222e0223220e020711140e
0223222e023511343e0233321e0215153e0333321e0602bb04080d0a0814
191e12152a2d311c0c1d302525301d0c0a1a291f202a170a233e38381c0d
1e20180b050402034b242e1a0a07080711243c2cfdd40a0f0a05050a0f0a
037c0a0f0a05050a0f0a6f3241260f0307090a0c152a>VSQHJN+Calibri-Bold AddT42Char 
1 3368 23 <00010079ffe903cc03c60032000025140e0223222e023535060623222e02
3511343e0233321e021511141e023332363711343e0233321e021503cc0a
19291f2129180a4a99525c7d4d210b1d312425301d0c122539263061370b
1d302525301c0c220a0f0a05050a0f0a6750503c68896602220a0f0a0505
0a0f0afe08464a351d464302510a0f0a05050a0f0a00>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g10 10 def
/g11 11 def
/g19 19 def
/g7 7 def
/g20 20 def
/g23 23 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 40 /g10 put
dup 41 /g11 put
dup 42 /g19 put
dup 43 /g7 put
dup 44 /g20 put
dup 45 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 210{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf49.68 126.96 mo(\(\)*+,%-,\))[9.59945 9.11351 9.59944 8.87946 6.48532 6.23341 9.59944 6.48533 0 ]xsh124.8 126.96 mo(&)shgrestore
587.04 131.28 mo
585.12 131.28 li
585.12 93.984 li
585.12 93.9357 585.12 93.8883 585.12 93.84 cv
587.04 93.84 li
587.04 131.28 li
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[2.4 0 0 37.92 584.88 463.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 10 
/H 158 
/M[10 0 0 -158 0 158 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 10 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 10 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 10 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
kPp/6K)^H&K)^H&o)F4~>

%%EndBinary
grestore
np
588.72 131.28 mo
587.04 131.28 li
587.04 93.84 li
588.72 93.84 li
588.72 131.28 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[2.16 0 0 37.92 586.8 463.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 9 
/H 158 
/M[9 0 0 -158 0 158 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 9 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfg!9j7BpsAfgpuqM"pt5B*psAfgpuqM"pt5B*psB&nqUkT,
psAfgpuqM"pt5B*psAfgpuqM"pt5B*rm:Phpt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5Q/r93q&pt5B*
psAfgpuqM"pt5B*psAfgpuqM"r7Lu#puqM"pt5B*psAfgpuqM"pt5B*psAfgpuqV%rm:GmpuqM"pt5B*
psAfgpuqM"pt5B*psAfgqWRtCpsAfgpuqM"pt5B*psAfgpuqM"pt5B*psAih!8.)1psAfgpuqM"pt5B*
psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuh_)q9\ohpuqM"pt5B*psAfgpuqM"
pt5B*psAfgs60=CpsAfgpuqM"pt5B*psAfgpuqM"pt5B*psB#mqq1]-psAfgpuqM"pt5B*psAfgpuqM"
pt5B*rQtJhpt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5N.rTO%'pt5B*psAfgpuqM"pt5B*psAfgpuqM"
qq1o#puqM"pt5B*psAfgpuqM"pt5B*psAfgpuqS$s3UPnpuqM"pt5B*psAfgpuqM"pt5B*psAfgq<.hB
psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"!8.,"puqM"
pt5B*psAfgpuqM"pt5B*psAfgpuqb)qU##ipuqM"pt5B*psAfgpuqM"pt5B*psAfgroj7CpsAfgpuqM"
pt5B*psAfgpuqM"pt5B*psAulr7Lf.psAfgpuqM"pt5B*psAfgpuqM"pt5B*r6YDhpt5B*psAfgpuqM"
pt5B*psAfgpuqM"pt5K-roj.(pt5B*psAfgpuqM"pt5B*psAfgpuqM"qUki#puqM"pt5B*psAfgpuqM"
pt5B*psAfgpuqP#!7:MnpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfg
puqM"pt,T1q<7V#pt5B*psAfgpuqM"pt5B*psAfgpuqM"s4I2#puqM"pt5B*psAfgpuqM"pt5B*psAfg
puq_(qp>,jpuqM"pt5B*psAfgpuqM"pt5B*psAfgrTO1CpsAfgpuqM"pt5B*psAfgpuqM"pt5B*psArk
rRgo/psAfgpuqM"pt5B*psAfgpuqM"pt5B*psAfgpuqM"!8.,"puqM"pt5B*J,~>

%%EndBinary
grestore
np
585.12 131.28 mo
346.32 131.28 li
346.32 93.84 li
585.12 93.84 li
585.12 93.8883 585.12 93.9357 585.12 93.984 cv
585.12 131.28 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[239.28 0 0 37.92 346.08 463.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 997 
/H 158 
/M[997 0 0 -158 0 158 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 997 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 997 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 997 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+r
K$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-
K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]f
aQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gM
K'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+r
K$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^IC
gXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-
K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gM
K'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`
ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+r
K$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-
K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-
cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gM
K'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#Oc
K$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r
]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-
K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7Q
K'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gM
W9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+r
K$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-D
K%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-
Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gM
K'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,
K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+r
K$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-
K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3g
K'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gM
K'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+r
K$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;O
K%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-
K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gM
K'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_
K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+r
K$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-
K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$
K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gM
K'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+r
K$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-V
aOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-
K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gM
K'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/s
gX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+r
K$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-
K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@
mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gM
K'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+r
K$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+r
cHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-
K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>
K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM
]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+r
K$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1
K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-
W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gM
K'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4
K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+r
Q-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-
K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4
K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gM
K':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+r
K$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXO
K%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-
K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gM
K'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_
K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+r
K$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-
K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNg
K'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gM
K'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+r
K$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fi
K%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-
K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gM
K'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1
aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+r
K$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-
K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$S
gZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gM
K'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+r
K$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0
mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-
K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gM
K'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gM
cKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+r
K$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*s
K%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-
]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gM
K'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!
K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+r
W6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-
K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8d
K'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gM
Q0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+r
K$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0q
K%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-
K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gM
K'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_
K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+r
K$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-
K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kg
K'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gM
K'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+r
K$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esO
K%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-
K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gM
K'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MD
K$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+r
K$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-
K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]f
aQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gM
K'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+r
K$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^IC
gXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-
K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gM
K'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`
ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+r
K$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-
K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-
cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+rK$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gM
K'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-DK%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#Oc
K$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r
]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gMK'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-
K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7Q
K'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+rK$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gM
W9E!_K$]+rK$]+rK$]+rK$_-VaOl*sK%P\-K%P\-K%P\-cIda4K'7gMK'7gMK'7gMQ0@Y_K$]+rK$]+r
K$]+rK$^ICgXq,1K%P\-K%P\-K%P\-]@b3gK'7gMK'7gMK'7gMK':MDK$]+rK$]+rK$]+rK$]e0mb!-D
K%P\-K%P\-K%P\-W7]kgK'7gMK'7gMK'7gMK'9i1aO#OcK$]+rK$]+rK$]+rcHq0qK%P\-K%P\-K%P\-
Q.YNgK'7gMK'7gMK'7gMK'9/sgX(Q!K$]+rK$]+rK$]+r]?nXOK%P\-K%P\-K%P\-K%SB$K'7gMK'7gM
K'7gMK'8K`ma-R4K$]+rK$]+rK$]+rW6j;OK%P\-K%P\-K%P\-K%R]faQS6>K'7gMK'7gMK'7gMcKKl,
K$]+rK$]+rK$]+rQ-esOK%P\-K%P\-K%P\-K%R$SgZX7QK'7gMK'7gMK'7gM]BI>_K$]+rK$]+rK$]+r
K$_fiK%P\-K%P\-K%P\-K%Q@@mc]8dK'7gMK'7gMK'7gMW9Aa~>

%%EndBinary
grestore
np
gsave
346.32 131.28 mo
588.72 131.28 li
588.72 93.84 li
346.32 93.84 li
346.32 131.28 li
clp
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 404 3 <0001008d000003540514001a000025140e02232122263511343e0233321e
02151121321e020354050a0f0afdaf212d0d1e332627321e0d01970a0f0a
056e1e291b0c272c04970a100a06060a100afbef0b192900>VSQHJN+Calibri-Bold AddT42Char 
1 1078 8 <0002007effe904000570002a003d000001140e0223222e022715140e0223
222e023511343e0233321e0215113e0333321e0205342e0223220e020711
161633323e02040034628f5b2d4e4745240b192a1e1f29190a0c1d302525
301d0c2244444828638a5728fefb112a4333193033361e35613531442d14
01ec77be864811263a29610b0f0a04040a0f0b05230a100b06060b100afe
1322301f0e4f86b375396a52310e223628fed84447325066>VSQHJN+Calibri-Bold AddT42Char 
1 2376 16 <0001007efffa017a05700015000025140e0223222e023511343e0233321e
0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a0f0a05
230a100b06060b100a00>VSQHJN+Calibri-Bold AddT42Char 
1 3022 21 <00010049ffe902f203d70049000001140e0223222e0435343e0233321e02
33323e0235342e0635343e0233321e0615140e0223222e0223220e021514
1e0602f239688e53325b4830160c04080c090b2b40553622352714253d4d
514d3d25325e87542a4f402c1308040303070c080926394b302232201026
3e4f514f3e26011e4c744e270f1718152d2c1d231507191e1a0e1a281a1e
2b201c222c405a3f406b4c2a0c12150f0f151f171b2214071518150e1a23
141f2a201c212c405900>VSQHJN+Calibri-Bold AddT42Char 
1 3918 27 <0001006bfe9f021c059000230000010602151412171614060623222e0227
2e0335343e02373e0333321e0202175456575206162d281c281b0f033650
351a1b364f35020c182920242e18030558c3fe61dadbfe63c61017100804
070b0768d3d7db7170dbd7d46905080703070e16>VSQHJN+Calibri-Bold AddT42Char 
1 3510 24 <00010016fffa03b303c6002c000001140e0207010e0323222e0227012e02
35343e0233321e0217131737133e0333321e0203b301030504fef4051127
43363543261105fef40607010b1c312529321d0c04cb0606c8030d1c2f26
252f1a0a039f050e11160efcd911150c04050c1510032714200e060a0f0a
040509110cfd711919028f0c110905040a0f>VSQHJN+Calibri-Bold AddT42Char 
1 4028 28 <00010061fe9f021205900021000001140e02070e03232226263437361235
340227263e0233321e0217161202121a354f36030f1b281c292d16065357
56550503192d251f281a0b03686c021a71dbd7d368070b070408101710c4
019fdbda019fc30d160e0703070805d2fe53>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g3 3 def
/g8 8 def
/g16 16 def
/g21 21 def
/g27 27 def
/g24 24 def
/g28 28 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 46 /g3 put
dup 47 /g8 put
dup 48 /g16 put
dup 49 /g21 put
dup 50 /g27 put
dup 51 /g24 put
dup 52 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 /g3 /g8 /g16 /g21 /g27 /g24 /g28 203{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf358.32 110.64 mo(.+/"-,&,\)0+%#"$1&2#$\(#3#\(-+014)[7.68066 8.88666 9.60663 9.60651 9.60666 6.47452 4.08057 6.47452 9.1207 4.31464 8.88666 6.2406 4.31464 9.60651 9.60666 7.19461 4.08057 5.75455 4.31464 9.60666 9.60663 4.56665 8.4007 4.56665 9.60669 9.60663 8.88666 4.31464 7.44666 0 ]xsh576.48 110.64 mo(&)shgrestore
gsave
18 577 mo
801 577 li
801 18 li
18 18 li
18 577 li
clp
801 131.04 mo
589.44 131.04 li
589.44 93.84 li
801 93.84 li
801 131.04 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[212.16 0 0 37.68 589.2 463.72 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 884 
/H 157 
/M[884 0 0 -157 0 157 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 884 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 884 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 884 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69
K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gM
K'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+r
K$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-
K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gM
K'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+r
LX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2
r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_
K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVR
K%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gM
K'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+r
K$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-
K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gM
K'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+r
N6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7
pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_
K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)M
K%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gM
K'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+r
K$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-
K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gM
K'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+r
OjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<
o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_
K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QH
K%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gM
K'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+r
K$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-
K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gM
K'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+r
QI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCA
K'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqI
K$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-
K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gM
K'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+r
K$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-
K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gM
LZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"
r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2Og
K'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&B
K$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-
K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gM
K'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+r
K$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-
K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gM
N9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'
pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmg
K'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=
K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-
K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gM
K'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+r
K$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-
K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gM
Om)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,
o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6g
K'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8
K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-
K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gM
K'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+r
K$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-
K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gM
QKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1
K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQ
K'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+r
K$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-
K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gM
K'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+r
K$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-
LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!R
r6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tO
K%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/ar
K'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+r
K$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-
K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gM
K'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+r
K$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-
N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80W
pX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=O
K%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4m
K'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+r
K$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-
K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gM
K'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+r
K$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-
OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\
o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[O
K%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\h
K'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+r
K$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-
K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gM
K'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+r
K$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-
QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8Na
K$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69
K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gM
K'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+r
K$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-
K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gM
K'8!Rr6U&BK$]+rK$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+r
LX>tOK%P\-K%P\-K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2
r9/arK'7gMK'7gMK'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_
K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVR
K%P\-K%P\-K%Q%7pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gM
K'7gMK'7gMN9L#_K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+r
K$]+rK$]J'pXk)MK%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-
K%P\-N7dmgK'7gMK'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gM
K'80WpX"N=K$]+rK$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+r
N6q=OK%P\-K%P\-K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7
pZR4mK'7gMK'7gMK'8?\o$E!8K$]+rK$]+rK$]h1K%P\-K%P\-K%P\-LY2OgK'7gMK'7gMK'7gMN9L#_
K$]+rK$]+rK$]+rOjN[OK%P\-K%P\-K%P\-QIpfQK'7gMK'7gMK'8!Rr6U&BK$]+rK$]+rK$]J'pXk)M
K%P\-K%P\-K%Q4<o&t\hK'7gMK'7gMK'8NaK$]+rK$]+rK$]+rLX>tOK%P\-K%P\-K%P\-N7dmgK'7gM
K'7gMK'7gMOm)A_K$]+rK$]+rK$]+rQI(69K%P\-K%P\-K%Pk2r9/arK'7gMK'7gMK'80WpX"N=K$]+r
K$]+rK$]Y,o%8QHK%P\-K%P\-K%QCAK'7gMK'7gMK'7gMLZnZ_K$]+rK$]+rK$]+rN6q=OK%P\-K%P\-
K%P\-OkB6gK'7gMK'7gMK'7gMQKWqIK$]+rK$]+rK$];"r7HVRK%P\-K%P\-K%Q%7pZR4mK'7gMK'7gM
K'8?\J,~>

%%EndBinary
grestore
np
grestore
gsave
589.44 131.04 mo
801 131.04 li
801 93.84 li
589.44 93.84 li
589.44 131.04 li
clp
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 610 5 <0001003fffe9038c05250049000001140e0223222e0435343e0233321e02
33323e0235342e0635343e0233321e0615140e0223222e0223220e021514
1e06038c4c82ae634373583b1a0b04090f0a0e33506f49304c351c304d62
68624d3045759f592e5c503e1407050203070d0b0b30465c372b402b152f
4f6468644e300184669a6734161f221a312e1f2a1a0b212821172a3e262c
3f312b303d5574515d8d5d2e0e181e140e17231a1d281a0c1c211b152534
1d2b3f312b303d557300>VSQHJN+Calibri-Bold AddT42Char 
1 1252 9 <00010048ffea032103d60035000025140e0623222e0235343e0233321e06
15140623222e0223220615141e0233323e0233321e020321030507183a4a
572e679f6c374378a462284d4335160905031410112634483262681a334d
33344b38260d090c0704b01a23180f17211a10407db47486c3803e0e181e
160f1823193a2f1c221c9792486e4a251f261f0a1b2a>VSQHJN+Calibri-Bold AddT42Char 
1 1866 13 <0003001bfe9303a203d3003e004e005f00000114062323161615140e0223
222627060615141617171e0315140e0223222e0235343e02372626353436
37262635343e023332161721321601342623220e0215141633323e021334
2627270e0315141633323e0203a21610691613346189542b4e150c13332e
d94c77512b3a74af7572a1672f1121301f2b2f362b232a376288522a4d21
011b1115febd5049253825125047263825133b483fb31a1f1306655c394e
30140360302e183d214e79532b150e0d24161d2502080325435e3c427556
3224405935213c373217174f2f3b61272362494e7b552d0a092cfef94850
192b391f444f182a37fd562d3002051323201e10323417262f00>VSQHJN+Calibri-Bold AddT42Char 
1 3798 26 <00010016fe9503b403c6002400002103060623222e023713262627012634
363633321e02171333133e0233321616140702836c09504d283018020777
0d1505fecd0d18392f2b321c0e07d203c006132c372b391b08fec4191607
101811012b06190e033423251508030c1917fdab02611a11080816251900
>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g5 5 def
/g9 9 def
/g13 13 def
/g26 26 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 53 /g5 put
dup 54 /g9 put
dup 55 /g13 put
dup 56 /g26 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 /g3 /g8 /g16 /g21 /g27 /g24 /g28 /g5 /g9 /g13 /g26 199{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf649.68 110.64 mo(5)sh658.08 110.64 mo(-/6+%\)7",8)[9.59943 9.59943 7.43939 8.87946 6.2334 9.11353 8.64539 9.5993 6.48529 0 ]xsh742.32 110.64 mo(&)shgrestore
240.24 131.76 mo
139.44 131.76 li
139.44 87.1199 li
240.24 87.1199 li
240.24 131.76 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[101.28 0 0 45.12 139.2 463 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 422 
/H 188 
/M[422 0 0 -188 0 188 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 422 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$V
K%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86Y
K$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1N
K%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_
K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-
Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/C
K$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9Z
eEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+r
K$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQb
bijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+r
K$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3Xg
K'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+r
gsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJ
K'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/s
X4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZB
K'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&
UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtOK%P\-Ze3XgK'7gM
MWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQrQp/CK$]+rgsDtO
K%P\-Ze3XgK'7gMMWjl_K$]+rK$`H&UY(1NK%RQbbijZBK'86YK$]+rK$`/sX4W$VK%R9ZeEDMJK'7sQ
rQp/CK$]+rgsDtOK%P\-Ze3XgK'7gMMWfQ~>

%%EndBinary
grestore
np
gsave
139.44 131.76 mo
240.24 131.76 li
240.24 87.1199 li
139.44 87.1199 li
139.44 131.76 li
clp
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 800 6 <0001000cfffa03ea050e0022000001140e02232111140e0223222e023511
21222e0235343e023321321e0203ea050a0f09febc0d1e332626331e0dfe
bc0a0e0a05050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a10
0a04130c19291d1e2a190b0b192a>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g6 6 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 57 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 /g3 /g8 /g16 /g21 /g27 /g24 /g28 /g5 /g9 /g13 /g26 /g6 198{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf162 104.16 mo(98*\)&"'&)[8.8793 8.64539 9.59944 9.11351 4.07336 9.5993 5.76529 0 ]xshgrestore
gsave
139.44 131.76 mo
240.24 131.76 li
240.24 87.1199 li
139.44 87.1199 li
139.44 131.76 li
clp
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 3648 25 <00010020fffa038d03c6002f000025160e0223222e022703030e0323222e
023713032626363633321e021713133e0333321616060703038508011c3a
302d371f0f04a5a5040e1d342a2c34180109f7e409011a39312c351e0e05
9f9e030c1a2d272c3517010bde3411160e0503090d0a013dfec30a0d0903
050e161101b7019c12190e0603060d0afed6012a080c0804040e1914fe6b
>VSQHJN+Calibri-Bold AddT42Char 
1 2132 14 <0001007efffa03d205700032000025140e0223222e023511342e02232206
0711140e0223222e023511343e0233321e021511363633321e021503d20c
1c312425311c0c132439263062350c1d302525301d0c0c1d302525301d0c
4187495b7d4d22220a0f0a05050a0f0a01fd414a351d4643fdaf0a0f0a05
050a0f0a05230a100b06060b100afe13403f3c688b63>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g25 25 def
/g14 14 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 58 /g25 put
dup 59 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 /g3 /g8 /g16 /g21 /g27 /g24 /g28 /g5 /g9 /g13 /g26 /g6 /g25 /g14 196{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf154.56 126.24 mo(\):6;+$7\))[9.1207 8.1666 7.44658 9.60666 8.88666 9.60664 8.63458 0 ]xsh225.12 126.24 mo(&)shgrestore
345.6 131.28 mo
343.44 131.28 li
343.44 86.6399 li
345.6 86.6399 li
345.6 131.28 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[2.64 0 0 45.12 343.2 463.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 11 
/H 188 
/M[11 0 0 -188 0 188 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 11 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 11 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 11 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
jo9r4K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`+UJ,~>

%%EndBinary
grestore
np
343.44 131.28 mo
244.32 131.28 li
244.32 86.6399 li
343.44 86.6399 li
343.44 131.28 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 595 ]ct
[99.6 0 0 45.12 244.08 463.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 415 
/H 188 
/M[415 0 0 -188 0 188 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 415 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 415 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 415 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-
K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_
K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-
f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.
K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch
`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+r
K$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPE
Pj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+r
P0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+g
K'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+r
ps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<
K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%
UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__
K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaO
K%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM
[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rO
K%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]f
kg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:O
K%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JC
K$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-
K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_
K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-
f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.
K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch
`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+r
K$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPE
Pj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+r
P0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+g
K'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+r
ps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<
K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%
UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__
K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaO
K%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM
[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rO
K%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]f
kg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:O
K%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JC
K$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-
K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_
K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-
f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.
K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch
`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+r
K$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPE
Pj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+r
P0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+g
K'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+r
ps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<
K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%
UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__
K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaO
K%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM
[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rO
K%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]f
kg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:O
K%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JC
K$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-
K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_
K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-
f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.
K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch
`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+r
K$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPE
Pj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+r
P0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+g
K'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+r
ps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<
K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%
UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__
K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-5i_K$]+rP0iaO
K%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rOK%P\-f%@+gK'7gM
[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]fkg4q.K$]+rps=rO
K%P\-f%@+gK'7gM[-5i_K$]+rP0iaOK%P\-K%TPEPj!__K':JCK$]+rK$`E%UtC:OK%Rch`or$<K'8]f
kg4q.K$]+rps=rOK%P\-f%@+gK'7gM[-3#~>

%%EndBinary
grestore
np
gsave
244.32 131.28 mo
345.6 131.28 li
345.6 86.6399 li
244.32 86.6399 li
244.32 131.28 li
clp
0 0 0 rgb
%ADOBeginSubsetFont: GVPBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VSQHJN+Calibri-Bold gcheck setglobal} if
1 232 2 <00010049ffea049b0524003f000001140e0223222e0223220e0215141e02
333236371123222635343e023321321e021511140e0423222e0235343e02
33321e04049b05090d090d3a6085585e986c3a3b6a955a2c5625f5121405
0a0e0901b51019130a1541606769359bf5aa5a60b0f999548a67441b0c04
451d2a190a242a244177a7656fa9723a1414012c2d361c26170b0b161f14
fdfd1e2d1a1c140a59a9f39a9ffdb15e1721261c3300>VSQHJN+Calibri-Bold AddT42Char 
VSQHJN+Calibri-Bold /CharStrings get begin
/g2 2 def
end
VSQHJN+Calibri-Bold /Encoding get
dup 60 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VSQHJN+Calibri-Bold*1 [33{/.notdef}rp /g4 /g18 /g15 /g17 /g22 /g1 /g12 /g10 /g11 /g19 /g7 /g20 /g23 /g3 /g8 /g16 /g21 /g27 /g24 /g28 /g5 /g9 /g13 /g26 /g6 /g25 /g14 /g2 195{/.notdef}rp]VSQHJN+Calibri-Bold nfVSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf268.08 103.68 mo(<"+0&"'&)[11.5199 9.5939 8.87405 4.32004 4.08597 9.5939 5.75989 0 ]xshgrestore
gsave
244.32 131.28 mo
345.6 131.28 li
345.6 86.6399 li
244.32 86.6399 li
244.32 131.28 li
clp
0 0 0 rgb
VSQHJN+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf253.68 125.52 mo(*,"\(-6%#"$)[9.59943 6.48532 9.5993 9.59946 9.59943 7.43939 6.2334 4.55945 9.5993 0 ]xsh336.24 125.52 mo(&)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VSQHJL+MyriadPro-It*1 uf/VSQHJL+MyriadPro-It uf/ZRXPMX+MyriadPro-It uf/VSQHJK+MyriadPro-Regular*1 uf/VSQHJK+MyriadPro-Regular uf/XJKAAA+MyriadPro-Regular uf/VSQHJN+Calibri-Bold*1 uf/VSQHJN+Calibri-Bold uf/GVPBAA+Calibri-Bold uf/VSQHJM+Calibri*1 uf/VSQHJM+Calibri uf/ZMPBAA+Calibri ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
